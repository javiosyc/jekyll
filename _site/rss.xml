<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Javio</title>
        <description>Javio - javiosyc</description>
        <link></link>
        <link></link>
        <lastBuildDate>2015-03-14T15:27:16+00:00</lastBuildDate>
        <pubDate>2015-03-14T15:27:16+00:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>understanding_objects</title>
                <description>
&lt;p&gt;Even though there are a number of built- in reference types in JavaScript, you will most likely create your own objects fairly frequently.&lt;/p&gt;

&lt;p&gt;As you do so, &lt;strong&gt;keep in mind that objects in JavaScript are dynamic, meaning that
they can change at any point during code execution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whereas class-based languages lock down objects based on a class definition, JavaScript objects have no such restrictions.&lt;/p&gt;

&lt;p&gt;A large part of JavaScript programming is managing those objects, which is why understanding how objects work is key to understanding JavaScript as a whole.&lt;/p&gt;

&lt;h2 id=&quot;defining-properties&quot;&gt;Defining Properties&lt;/h2&gt;

&lt;p&gt;When a property is first added to an object, JavaScript &lt;strong&gt;uses an internal method called [[Put]] on the object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The [[Put]] method creates a spot in the object to store the property&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can compare this to adding a key to a hash table for the first time.&lt;/p&gt;

&lt;p&gt;This operation specifies not just the initial value, but also some attributes of the property.&lt;/p&gt;

&lt;p&gt;So, in the previous example, when the name and age properties are first defined on each object, the [[Put]] method is invoked for each.&lt;/p&gt;

&lt;p&gt;The result of calling [[Put]] is the creation of an own property on the object.&lt;/p&gt;

&lt;p&gt;An own property simply indicates that the specific instance of the object owns that property.&lt;/p&gt;

&lt;p&gt;The property is stored directly on the instance, and all operations on the property must be performed through that object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When a new value is assigned to an existing property, a separate operation called [[Set]] takes place&lt;/strong&gt;.&lt;/p&gt;

</description>
                <link>/javascript/2015/03/10/understanding_objects</link>
                <guid>/javascript/2015/03/10/understanding_objects</guid>
                <pubDate>2015-03-10T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>CONSTRUCTORS AND PROTOTYPES</title>
                <description>
&lt;h2 id=&quot;constructors&quot;&gt;Constructors&lt;/h2&gt;

&lt;p&gt;A constructor is simply a function that is used with &lt;strong&gt;new&lt;/strong&gt; to create an object.&lt;/p&gt;

&lt;p&gt;ex: Object, Array, and Function.&lt;/p&gt;

&lt;p&gt;The advantage of constructors is that objects created with the same constructor contain the same properties and methods.&lt;/p&gt;

&lt;p&gt;Because a constructor is &lt;strong&gt;just a function&lt;/strong&gt;, you define it in the same way.&lt;/p&gt;

&lt;p&gt;The only difference is that constructor names should &lt;strong&gt;begin with a capital letter&lt;/strong&gt;, to distinguish them from other functions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function Person() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    // intentionally empty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = new Person();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = new Person();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you have no parameters to pass into your constructor, you can even omit the parentheses:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = new Person;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = new Person;&lt;/code&gt;&lt;/p&gt;

</description>
                <link>/javascript/2015/02/22/constructors-and-prototypes</link>
                <guid>/javascript/2015/02/22/constructors-and-prototypes</guid>
                <pubDate>2015-02-22T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>javascript function</title>
                <description>
&lt;h2 id=&quot;function&quot;&gt;Function&lt;/h2&gt;

&lt;p&gt;The defining characteristic of a function — what distinguishes it from any other object — is the presence of &lt;strong&gt;an internal property named [[Call]]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Internal properties are not accessible via code but rather define the behavior of code as it executes.&lt;/p&gt;

&lt;p&gt;ECMAScript defines multiple internal properties for objects in JavaScript, and these internal properties are indicated by &lt;strong&gt;double-square-bracket notation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The [[Call]] property is unique to functions and indicates that the object can be executed&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;declarations-vs-expressions&quot;&gt;Declarations vs. Expressions&lt;/h3&gt;

&lt;p&gt;two literal forms of functions.&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Function declaration&lt;/strong&gt;, which begins with the function keyword and includes the name of the function immediately following it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; function add(num1, num2) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            return num1 + num2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Function expression&lt;/strong&gt;, which doesn’t require a name after function.&lt;/p&gt;

&lt;p&gt;These functions are considered &lt;strong&gt;anonymous&lt;/strong&gt; because the function object itself has no name.&lt;/p&gt;

&lt;p&gt;Instead, function expressions are typically &lt;strong&gt;referenced via a variable or property&lt;/strong&gt;, as in this expression:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var add = function(num1, num2) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;		return num1 + num2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This code actually assigns a function value to the variable add. &lt;/p&gt;

&lt;p&gt;The function expression is almost identical to the function declaration except for &lt;strong&gt;the missing name and the semicolon at the end&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Assignment expressions typically end with a semicolon, just as if you were assigning any other value.&lt;/p&gt;

&lt;p&gt;Function declarations &lt;strong&gt;are hoisted to the top of the context (either the function in which the declaration occurs or the global scope) when the code is executed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var result = add(5, 5);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        function add(num1, num2) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            return num1 + num2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s because the JavaScript &lt;strong&gt;engine hoists the function declaration to the top and actually executes the code&lt;/strong&gt; as if it were written like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt; // how the JavaScript engine interprets the code&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        function add(num1, num2) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            return num1 + num2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        var result = add(5, 5);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function hoisting happens only for function declarations because the function name is known ahead of time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Function expressions, on the other hand, cannot be hoisted because the functions can be referenced only through a variable.&lt;/p&gt;

&lt;p&gt;So this code causes an error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// error!&lt;/code&gt;
`       var result = add(5, 5);`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        var add = function(num1, num2) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            return num1 + num2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-as-values&quot;&gt;Functions as Values&lt;/h3&gt;

&lt;p&gt;Because JavaScript has first-class functions, you can use them just &lt;strong&gt;as you do any other objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can assign them to variables, add them to objects, pass them to other functions as arguments, and return them from functions.&lt;/p&gt;

&lt;p&gt;The sort() method on JavaScript arrays accepts a comparison function as an optional parameter.&lt;/p&gt;

&lt;p&gt;The comparison function is called whenever two values in the array must be compared.&lt;/p&gt;

&lt;p&gt;If the first value is smaller than the second, the comparison function must return a negative number.&lt;/p&gt;

&lt;p&gt;If the first value is larger than the second, the function must return a positive number.&lt;/p&gt;

&lt;p&gt;If the two values are equal, the function should return zero.&lt;/p&gt;

&lt;p&gt;By default, sort() converts every item in an array to a string and then performs a comparison.&lt;/p&gt;

&lt;p&gt;That means you can’t accurately sort an array of numbers without specifying a comparison function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var numbers = [ 1, 5, 8, 4, 7, 10, 2, 6 ];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;numbers.sort(function(first, second) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;       return first - second;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;   });&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(numbers); // &quot;[1, 2, 4, 5, 6, 7, 8, 10]&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;numbers.sort();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(numbers);       // &quot;[1, 10, 2, 4, 5, 6, 7, 8]&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;/h3&gt;

&lt;p&gt;Another unique aspect of JavaScript functions is that you can &lt;strong&gt;pass any number of parameters to any function without causing an error&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s because function parameters are actually &lt;strong&gt;stored as an array-like structure called arguments&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just like a regular JavaScript array, arguments can grow to contain any number of values.&lt;/p&gt;

&lt;p&gt;The values are referenced via numeric indices, and there is a length property to determine how many values are present.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The arguments object is automatically available inside any function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means named parameters in a function exist mostly for convenience and don’t actually limit the number of arguments that a function can accept.&lt;/p&gt;

&lt;p&gt;The first implementation of reflect() is much easier to understand because it uses a named argument (as you would in other languages).&lt;/p&gt;

&lt;p&gt;The version that uses the arguments object can be confusing because there are no named arguments, and you must read the body of the function to determine if arguments are used.&lt;/p&gt;

&lt;p&gt;That is why many developers prefer to avoid using arguments unless necessary.&lt;/p&gt;

&lt;h3 id=&quot;overloading&quot;&gt;Overloading&lt;/h3&gt;

&lt;p&gt;As mentioned previously, JavaScript functions can accept any number of parameters, and the types of parameters a function takes aren’t specified at all.&lt;/p&gt;

&lt;p&gt;That means JavaScript functions don’t actually have signatures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A lack of function signatures also means a lack of function overloading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can retrieve the number of parameters that were passed in by using the arguments object, and you can use that information to determine what to do.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function sayMessage(message) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    if (arguments.length === 0) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        message = &quot;Default message&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    console.log(message);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayMessage(&quot;Hello!&quot;);       // outputs &quot;Hello!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a little more involved than function overloading in other languages, but the end result is the same. If you really want to check for different data types, you can use typeof and instanceof.&lt;/p&gt;

&lt;p&gt;In practice, checking the named parameter against undefined is more common than relying on arguments.length.&lt;/p&gt;

&lt;p&gt;### Object Methods&lt;/p&gt;

&lt;p&gt;When a property value is actually a function, the property is considered a method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            name: &quot;Nicholas&quot;,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            sayName: function() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;                console.log(person.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        };&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person.sayName();       // outputs &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-this-object&quot;&gt;The this Object&lt;/h4&gt;

&lt;p&gt;You may have noticed something strange in the previous example. The sayName() method references person.name directly, which creates tight coupling between the method and the object.&lt;/p&gt;

&lt;p&gt;This is problematic for a number of reasons. &lt;/p&gt;

&lt;p&gt;First, if you change the variable name, you also need to remember to change the reference to that name in the method.&lt;/p&gt;

&lt;p&gt;Second, this sort of tight coupling makes it difficult to use the same function for different objects. Fortunately, JavaScript has a way around this issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every scope in JavaScript has a this object that represents the calling object for the function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the global scope, this represents the &lt;strong&gt;global object (window in web browsers)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When a function is called while attached to an object, the value of this is equal to that object by default.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, instead of directly referencing an object inside a method, you can reference this instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Nicholas&quot;,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    sayName: function() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        console.log(this.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person.sayName();       // outputs &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function sayNameForAll() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    console.log(this.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Nicholas&quot;,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    sayName: sayNameForAll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Greg&quot;,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    sayName: sayNameForAll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Michael&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person1.sayName(); // outputs &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person2.sayName(); // outputs &quot;Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll(); // outputs &quot;Michael&quot;&lt;/code&gt; &lt;/p&gt;

&lt;h3 id=&quot;changing-this&quot;&gt;&lt;strong&gt;&lt;em&gt;Changing this&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The ability to use and manipulate the this value of functions is key to good object-oriented programming in JavaScript.&lt;/p&gt;

&lt;p&gt;Functions can be used in many different contexts, and they need to be able to work in each situation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even though this is typically assigned automatically, you can change its value to achieve different goals.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are three function methods that allow you to change the value of this. (Remember that functions are objects, and objects can have methods, so functions can, too.)&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-call-method&quot;&gt;The call() Method&lt;/h4&gt;

&lt;p&gt;The first function method for manipulating this is call(), which executes the function with a particular this value and with specific parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first parameter of call() is the value to which this should be equal when the function is executed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All subsequent parameters are the parameters that should be passed into the function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function sayNameForAll(label) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    console.log(label + &quot;:&quot; + this.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Michael&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.call(this, &quot;global&quot;); // outputs &quot;global:Michael&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.call(person1, &quot;person1&quot;); // outputs &quot;person1:Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.call(person2, &quot;person2&quot;); // outputs &quot;person2:Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-apply-method&quot;&gt;&lt;strong&gt;The apply() Method&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The second function method you can use to manipulate this is apply().&lt;/p&gt;

&lt;p&gt;The apply() method works exactly the same as call() except that it accepts only two parameters: &lt;strong&gt;the value for this&lt;/strong&gt; and &lt;strong&gt;an array or array-like object of parameters to pass to the function (that means you can use an arguments object as the second parameter)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, instead of individually naming each parameter using call(), you can easily pass arrays to apply() as the second argument.&lt;/p&gt;

&lt;p&gt;Otherwise, call() and apply() behave identically.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function sayNameForAll(label) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    console.log(label + &quot;:&quot; + this.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    name: &quot;Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Michael&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.apply(this, [&quot;global&quot;]); // outputs &quot;person1:Michael&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.apply(person1, [&quot;person1&quot;]);  // outputs &quot;person1:Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForAll.apply(person2, [&quot;person2&quot;]);  // outputs &quot;person2:Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The method you use typically depends on &lt;strong&gt;the type of data you have&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you already have an array of data, use apply(); if you just have individual variables, use call()&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-bind-method&quot;&gt;&lt;strong&gt;The bind() Method&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The third function method for changing this is bind().&lt;/p&gt;

&lt;p&gt;This method was added in ECMAScript 5, and it behaves quite differently than the other two.&lt;/p&gt;

&lt;p&gt;The first argument to bind() is the this value for the new function.&lt;/p&gt;

&lt;p&gt;All other arguments represent named parameters that should be permanently set in the new function.&lt;/p&gt;

&lt;p&gt;You can still pass in any parameters that aren’t permanently set later.&lt;/p&gt;

&lt;p&gt;The following code shows two examples that use bind().&lt;/p&gt;

&lt;p&gt;You create the sayNameForPerson1() function by binding the this value to person1, while sayNameForPerson2() binds this to person2 and binds the first parameter as “person2”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function sayNameForAll(label) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;       console.log(label + &quot;:&quot; + this.name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person1 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;       name: &quot;Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var person2 = {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;       name: &quot;Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// create a function just for person1&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var sayNameForPerson1 = sayNameForAll.bind(person1);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForPerson1(&quot;person1&quot;); // outputs &quot;person1:Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// create a function just for person2&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var sayNameForPerson2 = sayNameForAll.bind(person2, &quot;person2&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sayNameForPerson2(); // outputs &quot;person2:Greg&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// attaching a method to an object doesn’t change ‘this’&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person2.sayName = sayNameForPerson1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;person2.sayName(&quot;person2&quot;); // outputs &quot;person2:Nicholas&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;JavaScript functions are unique in that they are also objects, meaning they can be accessed, copied, overwritten, and generally treated just like any other object value.&lt;/p&gt;

&lt;p&gt;The biggest difference between a JavaScript function and other objects is a special internal property, [[Call]], which contains the execution instructions for the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The typeof operator looks for this internal property on an object, and if it finds it, returns “function”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are two function literal forms: declarations and expressions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Function declarations contain the function name to the right of the function keyword and are hoisted to the top of the context in which they are defined.&lt;/p&gt;

&lt;p&gt;Function expressions are used where other values can also be used, such as assignment expressions, function parameters, or the return value of another function.&lt;/p&gt;

&lt;p&gt;Because functions are objects, there is a Function constructor.&lt;/p&gt;

&lt;p&gt;You can create new functions with the Function constructor, but this isn’t generally recommended because it can make your code harder to understand and debugging much more difficult.&lt;/p&gt;

&lt;p&gt;That said, you will likely run into its usage from time to time in situations where the true form of the function isn’t known until runtime.&lt;/p&gt;

&lt;p&gt;You need a good grasp of functions to understand how object- oriented programming works in JavaScript.&lt;/p&gt;

&lt;p&gt;Because JavaScript has no concept of a class, functions and other objects are all you have to work with to achieve aggregation and inheritance.&lt;/p&gt;
</description>
                <link>/javascript/function/2015/02/18/javascript-function</link>
                <guid>/javascript/function/2015/02/18/javascript-function</guid>
                <pubDate>2015-02-18T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Primitive and Reference Types - Javascript</title>
                <description>
&lt;h2 id=&quot;type&quot;&gt;Type&lt;/h2&gt;

&lt;p&gt;1.primitive types&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;are stored as simple data types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.Reference types&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;are stored as objects, which are really just references to locations in memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Javascript lets you treat primitives types like reference type in order to make the language more consistent for the developer.&lt;/p&gt;

&lt;p&gt;Javascript tracks variables for a &lt;strong&gt;particular scope with a variable object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primitive values are stored directly on the variable object, while reference values are placed as &lt;strong&gt;a pointer in the variable object&lt;/strong&gt;, which serves as a reference to a location in memory where the object is stored.&lt;/p&gt;

&lt;h3 id=&quot;primtive-type&quot;&gt;Primtive type&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;true or false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Number&lt;/td&gt;
      &lt;td&gt;Any integer or floating-point numeric value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;A character or sequence of character delimited by either single or double quotes (Javascript has no separate character type)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Null&lt;/td&gt;
      &lt;td&gt;A primitive type that has only one value, null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Undefined&lt;/td&gt;
      &lt;td&gt;A primitive type that has only one value, undefined (undefined is the value assigned to a variable that is not initialized)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A variable holding a primitive directly contains the primitive value (rather than a pointer to an objects).&lt;/p&gt;

&lt;p&gt;When you assign a primitive value to a variable, the value is copied into that variable.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable Object&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;color1&lt;/td&gt;
      &lt;td&gt;red&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;color2&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;identifying-primitive-types&quot;&gt;Identifying Primitive Types&lt;/h4&gt;

&lt;p&gt;The best way to identfiy primitive types is with the &lt;strong&gt;typeof operator&lt;/strong&gt;, which works on any variable and returns &lt;strong&gt;a string indicating the type of data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;console.log(typeof “Nicholas”); // “string”&lt;/p&gt;

&lt;p&gt;console.log(typeof 10); // “number”&lt;/p&gt;

&lt;p&gt;console.log(typeof 5.1); // “number”&lt;/p&gt;

&lt;p&gt;console.log(typeof true); // “boolean”&lt;/p&gt;

&lt;p&gt;console.log(typeof undefined); // “undefined”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;When you run typeof null, the result is “object”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;console.log(typeof null);           // “object”&lt;/p&gt;

&lt;p&gt;The best way to determined if a value is null is compare it against null directly, like this:&lt;/p&gt;

&lt;p&gt;**console.log (value === null) **&lt;/p&gt;

&lt;p&gt;The triple equals operator (===) does the comparison without coercing the variable to another type.&lt;/p&gt;

&lt;h4 id=&quot;primitive-methods&quot;&gt;Primitive Methods&lt;/h4&gt;

&lt;p&gt;String	toLowerCase(), charAt(0), substring(2,5)&lt;/p&gt;

&lt;p&gt;Number	toFixed(2), toString()&lt;/p&gt;

&lt;p&gt;Boolean	toString()&lt;/p&gt;

&lt;h3 id=&quot;reference-types&quot;&gt;Reference Types&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reference types represent objects in JavaScript&lt;/strong&gt; and are the closest things to classes that you will find in the language.&lt;/p&gt;

&lt;p&gt;Reference values are instances of reference types and are synonymous with objects.&lt;/p&gt;

&lt;p&gt;An object is &lt;strong&gt;an unordered list of properties consisting of a name (always a string) and a value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When the value of a property is a function, it is called a method.&lt;/p&gt;

&lt;p&gt;Functions themselves are actually referece values in JavaScript, so there’s little difference between a property that contains an array and one that contains a function except that a function can be executed.&lt;/p&gt;

&lt;h4 id=&quot;create-objects&quot;&gt;Create Objects&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Object&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;value&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Structure of an object&lt;/p&gt;

&lt;p&gt;There are a couple of ways to create ,or instantiate, objects.&lt;/p&gt;

&lt;p&gt;1.The first is to use the &lt;strong&gt;new operator with a constructor&lt;/strong&gt;. (A contructor is simply a function that users new to create an object- any function can be a constructor.)&lt;/p&gt;

&lt;p&gt;By convention, &lt;strong&gt;constructors in JavaScript begin with a capital letter&lt;/strong&gt; to distinguish them from nonconstructor functions.&lt;/p&gt;

&lt;p&gt;var object = new Object();&lt;/p&gt;

&lt;p&gt;Object variable holds &lt;strong&gt;a pointer&lt;/strong&gt; (or reference) to the location in memory where the object exists.&lt;/p&gt;

&lt;p&gt;That means if you assign one variable to another, each variable gets a copy of 
the pointer, and both still reference the same object in memory.&lt;/p&gt;

&lt;h3 id=&quot;dereferencing-objects&quot;&gt;Dereferencing Objects&lt;/h3&gt;

&lt;p&gt;JavaScript is &lt;strong&gt;a garbage-collected language&lt;/strong&gt;, so you don’t really need to worry about memory allocations when you use reference types.&lt;/p&gt;

&lt;p&gt;However, it’s best to dereference objects that you no longer need so that the garbage collector can free up that memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best way to do this is to set the object variable to null.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;var object1 = new Object();&lt;/p&gt;

&lt;p&gt;// do something&lt;/p&gt;

&lt;p&gt;object1 = null;     // dereference&lt;/p&gt;

&lt;h3 id=&quot;adding-or-removing-properties&quot;&gt;Adding or Removing Properties&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Another interesting aspect of objects in JavaScript is that you can add and remove properties at any time&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;instantiating-built-in-types&quot;&gt;Instantiating Built-in Types&lt;/h3&gt;

&lt;p&gt;The Object type is just one of a handful of built-in reference types that JavaScript provides. &lt;/p&gt;

&lt;p&gt;The built-in types are:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Array&lt;/td&gt;
      &lt;td&gt;An ordered list of numerically indexed values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;A date and time&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Error&lt;/td&gt;
      &lt;td&gt;A runtime error (there are also several more specific error subtypes)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Function&lt;/td&gt;
      &lt;td&gt;A function&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Object&lt;/td&gt;
      &lt;td&gt;A generic object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RegExp&lt;/td&gt;
      &lt;td&gt;A regular expression&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;var items = new Array();&lt;/p&gt;

&lt;p&gt;var now = new Date();&lt;/p&gt;

&lt;p&gt;var error = new Error(“Something bad happened.”);&lt;/p&gt;

&lt;p&gt;var func = new Function(“console.log(‘Hi’);”);&lt;/p&gt;

&lt;p&gt;var object = new Object();&lt;/p&gt;

&lt;p&gt;var re = new RegExp(“\d+”);&lt;/p&gt;

&lt;h3 id=&quot;literal-forms&quot;&gt;Literal Forms&lt;/h3&gt;

&lt;p&gt;A literal is &lt;strong&gt;syntax that allows you to define a reference value without explicitly creating an object, using the new operator and the object’s constructor.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;object-and-array-literals&quot;&gt;Object and Array Literals&lt;/h3&gt;

&lt;p&gt;To create an object with object literal syntax, you can &lt;strong&gt;define the properties of a new object inside braces&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Properties are made up of &lt;strong&gt;an identifier or string, a colon, and a value, with multiple properties separated by commas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var book = {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name: &quot;The Principles of Object-Oriented JavaScript&quot;,

year: 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;You can also use &lt;strong&gt;string literals as property names&lt;/strong&gt;, which is useful when you want a property name to have &lt;strong&gt;spaces or other special characters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var book = {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;name&quot;: &quot;The Principles of Object-Oriented JavaScript&quot;,

&quot;year&quot;: 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;You can define an array literal in a similar way by enclosing any num- ber of comma-separated values inside &lt;strong&gt;square brackets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var colors = [ “red”, “blue”, “green” ];&lt;/p&gt;

&lt;p&gt;console.log(colors[0]);     // “red”&lt;/p&gt;

&lt;p&gt;This code is equivalent to the following:&lt;/p&gt;

&lt;p&gt;var colors = new Array(“red”, “blue”, “green”)&lt;/p&gt;

&lt;p&gt;console.log(colors[0]);     // “red”&lt;/p&gt;

&lt;h3 id=&quot;function-literals&quot;&gt;Function Literals&lt;/h3&gt;

&lt;p&gt;In fact, using the Function constructor is typically discouraged given the challenges of maintaining, reading, and debugging a string of code rather than actual code, so you’ll rarely see it in code.&lt;/p&gt;

&lt;p&gt;function reflect(value) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        return value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// is the same as&lt;/p&gt;

&lt;p&gt;var reflect = new Function(“value”, “return value;”);&lt;/p&gt;

&lt;h3 id=&quot;regular-expression-literals&quot;&gt;Regular Expression Literals&lt;/h3&gt;

&lt;p&gt;JavaScript also has regular expression literals that allow you to define regular expressions without using the RegExp constructor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular expression literals look very similar to regular expressions in Perl&lt;/strong&gt;: &lt;strong&gt;The pattern is contained between two slashes&lt;/strong&gt;, &lt;strong&gt;and any additional options are single characters following the second slash&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var numbers = /\d+/g;&lt;/p&gt;

&lt;p&gt;// is the same as&lt;/p&gt;

&lt;p&gt;var numbers = new RegExp(“\d+”, “g”);&lt;/p&gt;

&lt;p&gt;The literal form of regular expressions in JavaScript is a bit easier
to deal with than the constructor form because you don’t need to worry about escaping characters within strings.&lt;/p&gt;

&lt;h3 id=&quot;property-access&quot;&gt;Property Access&lt;/h3&gt;

&lt;p&gt;Properties are name/value pairs that are stored on an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dot notation is the most common way to access properties in JavaScript&lt;/strong&gt; (as in many object-oriented languages), but you can also access properties on JavaScript objects by &lt;strong&gt;using bracket notation with a string&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;var array = [];&lt;/p&gt;

&lt;p&gt;array.push(12345);&lt;/p&gt;

&lt;p&gt;With bracket notation ..&lt;/p&gt;

&lt;p&gt;var array = [];&lt;/p&gt;

&lt;p&gt;array&lt;a href=&quot;12345&quot;&gt;“push”&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;This syntax is very useful when you want to dynamically decide which property to access.&lt;/p&gt;

&lt;p&gt;var array = [];&lt;/p&gt;

&lt;p&gt;var method = “push”;&lt;/p&gt;

&lt;p&gt;array&lt;a href=&quot;12345&quot;&gt;method&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;The point to remember is that, other than syntax, the only difference—performance or otherwise—between dot notation and bracket notation is that bracket notation allows you to use special characters in property names.&lt;/p&gt;

&lt;h3 id=&quot;identifying-reference-types&quot;&gt;Identifying Reference Types&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A function is the easiest reference type&lt;/strong&gt; to identify because when you use the typeof operator on a function, the operator should return “function”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function reflect(value) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;            return value;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;        console.log(typeof reflect);    // &quot;function&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Other reference types are trickier to identify because, for &lt;strong&gt;all reference types other than functions, typeof returns “object”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The instanceof operator takes an object and a constructor as parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var items = [];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var object = {};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function reflect(value) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    return value;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(items instanceof Array);// true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(object instanceof Object);// true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(reflect instanceof Function);// true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The instanceof operator can identify inherited types.&lt;/p&gt;

&lt;p&gt;That means every object is actually an instance of Object because every reference type inherits from Object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var items = [];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var object = {};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function reflect(value) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;    return value;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(items instanceof Array);&lt;/code&gt; // true&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(items instanceof Object);&lt;/code&gt; // true&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(object instanceof Object);&lt;/code&gt; // true&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(object instanceof Array);&lt;/code&gt;  // false&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(reflect instanceof Function);&lt;/code&gt; // true&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(reflect instanceof Object);&lt;/code&gt; // true&lt;/p&gt;

&lt;h3 id=&quot;identifying-arrays&quot;&gt;Identifying Arrays&lt;/h3&gt;

&lt;p&gt;Although instanceof can identify arrays, there is one exception that affects web developers: &lt;strong&gt;JavaScript values can be passed back and forth between frames in the same web page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This becomes a problem only when you try to identify the type of a reference value, because **each web page has its own global context—its own version of Object, Array, and all other built-in types.&lt;/p&gt;

&lt;p&gt;To solve this problem, &lt;strong&gt;ECMAScript 5 introduced Array.isArray(), which definitively identifies the value as an instance of Array regardless
of the value’s origin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If your environment is ECMAScript 5 compliant, Array.isArray() is the best way to identify arrays.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var items = [];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(Array.isArray(items));      // true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This method isn’t supported in Internet Explorer 8 and earlier.&lt;/p&gt;

&lt;h3 id=&quot;primitive-wrapper-types&quot;&gt;Primitive Wrapper Types&lt;/h3&gt;

&lt;p&gt;There are three primitive wrapper types (String, Number, and Boolean).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These special reference types exist to make working with primitive values as easy as working with objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(It would be very confusing if you had to use a different syntax or switch to a procedural style just to get a substring of text.)&lt;/p&gt;

&lt;p&gt;The primitive wrapper types are reference types that are &lt;strong&gt;automatically created behind the scenes whenever strings, numbers, or Booleans are read&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Nicholas&quot;;  // a primitive string value is assigned to name&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;var firstChar = name.charAt(0); // treats name like an object and calls charAt(0) using dot notation.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(firstChar);                 // &quot;N&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is what happens behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// what the JavaScript engine does&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Nicholas&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var temp = new String(name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var firstChar = temp.charAt(0);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;temp = null;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(firstChar); // &quot;N&quot; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because the second line uses a string (a primitive) like an object, the JavaScript engine creates an instance of String so that charAt(0) will work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The String object exists only for one statement before it’s destroyed (a process called autoboxing).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Nicholas&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;name.last = &quot;Zakas&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(name.last);                 // undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With primitive wrapper types, properties seem to disappear because the object on which the property was assigned is destroyed immediately afterward.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; //what the JavaScript engine does&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var name = &quot;Nicholas&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var temp = new String(name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;temp.last = &quot;Zakas&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;temp = null; 	// temporary object destroyed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var temp = new String(name);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(temp.last); // undefined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;temp = null;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead of assigning a new property to a string, the code actually creates a new property on a temporary object that is then destroyed.&lt;/p&gt;

&lt;p&gt;When you try to access that property later, a different object is temporarily created and the new property doesn’t exist there.&lt;/p&gt;

&lt;p&gt;Manually instantiating primitive wrappers can also be confusing in other ways, so unless you find a special case where it makes sense to do so, you should avoid it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most of the time, using primitive wrapper objects instead of primitives only leads to errors.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;While JavaScript doesn’t have classes, it does have types.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Each variable or piece of data is associated with a specific primitive or reference type.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The five primitive types (strings, numbers, Booleans, null, and undefined) represent simple values stored directly in the variable object for a given context.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;typeof to identify primitive types with the exception of null, which must be compared directly against the special value null&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Reference types are the closest thing to classes in JavaScript, and objects are instances of reference types.&lt;/p&gt;

&lt;p&gt;You can create new objects using the &lt;strong&gt;new operator or a reference literal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You access properties and methods primarily using dot notation, but you can also use bracket notation.&lt;/p&gt;

&lt;p&gt;Functions are objects in JavaScript, and you can identify them with the typeof operator.&lt;/p&gt;

&lt;p&gt;You should use &lt;strong&gt;instanceof&lt;/strong&gt; with a constructor to identify objects of any other reference type.&lt;/p&gt;

&lt;p&gt;To make primitives seem more like references, JavaScript has three primitive wrapper types: String, Number, and Boolean. JavaScript creates these objects behind the scenes so that you can treat primitives like regular objects, but the temporary objects are destroyed as soon as the statement using them is complete.&lt;/p&gt;

&lt;p&gt;Although you can create your own instances of primitive wrappers, it’s best not to do that because it can be confusing.&lt;/p&gt;
</description>
                <link>/javascript/2015/02/15/primitive-and-reference-types-javascript</link>
                <guid>/javascript/2015/02/15/primitive-and-reference-types-javascript</guid>
                <pubDate>2015-02-15T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Introduction to Segmentation</title>
                <description>
&lt;h2 id=&quot;image-and-video-segmentation&quot;&gt;Image and Video Segmentation&lt;/h2&gt;

&lt;p&gt;1.the basic idea is that we want to separate objects.&lt;/p&gt;

&lt;p&gt;2.We want to call different objects by different names, depending on some properties of those objects.&lt;/p&gt;

&lt;h3 id=&quot;foreground-background-segmentation&quot;&gt;Foreground Background Segmentation&lt;/h3&gt;

&lt;p&gt;So for example, here we have a cat and we want to make sure that we find the boundary of this cat and we can separate he cat here from it&amp;#8217;s background.&lt;/p&gt;

&lt;p&gt;this type of segmentation is called foreground background &lt;/p&gt;

&lt;h3 id=&quot;electro-microscopy-segmentation&quot;&gt;Electro Microscopy Segmentation&lt;/h3&gt;

&lt;p&gt;Sometimes, what we actually need is to label every thing that have been seen the 
image.&lt;/p&gt;

&lt;p&gt;So to find regions in these image, which is an image of neurons taking with a technique called electro microscopy.&lt;/p&gt;

&lt;h3 id=&quot;after-effects---this-is-whats-behind-a--very-important-component-of-one-of-adobes-products&quot;&gt;After Effects - this is what&amp;#8217;s behind a  very important component of one of Adobe&amp;#8217;s products.&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;video&lt;/strong&gt; and we have a similar video, but with a different background. &lt;/p&gt;

&lt;p&gt;For doing that, we had to extract the main object here from the video.&lt;/p&gt;

&lt;p&gt;So, we are able to produce a different background for that.&lt;/p&gt;

&lt;h2 id=&quot;on-edges-and-regions---52&quot;&gt;On Edges and Regions - 5.2&lt;/h2&gt;

&lt;h2 id=&quot;hough-transform-with-matlad-demo---53&quot;&gt;Hough Transform with Matlad Demo - 5.3&lt;/h2&gt;

&lt;p&gt;The Hough transform is a really nice technique to detect objects, to segment out objects, for which &lt;strong&gt;you know their shape&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example we want to detect the ball. We know it&amp;#8217;s circular&lt;/p&gt;

&lt;p&gt;we include that information in our detection, in our segmentation technique, to detect that it&amp;#8217;s actually circular.&lt;/p&gt;

&lt;h2 id=&quot;line-segment-detector-with-demo---54&quot;&gt;Line Segment Detector with Demo - 5.4&lt;/h2&gt;

&lt;p&gt;[online] (http://www.ipol.im/pub/art/2012/gjmr-lsd/)&lt;/p&gt;

&lt;h2 id=&quot;otsus-segmentation-with-demo---55&quot;&gt;Otsu&amp;#8217;s Segmentation with Demo - 5.5&lt;/h2&gt;

</description>
                <link>/images/2015/02/14/introduction-to-segmentation</link>
                <guid>/images/2015/02/14/introduction-to-segmentation</guid>
                <pubDate>2015-02-14T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>python tutorial</title>
                <description>
&lt;p&gt;raw_input&lt;/p&gt;

&lt;p&gt;ex:&lt;/p&gt;

&lt;p&gt;name = raw_input(&amp;#8220;Who are you?&amp;#8221;)&lt;/p&gt;

</description>
                <link>/python/2015/02/13/python-tutorial</link>
                <guid>/python/2015/02/13/python-tutorial</guid>
                <pubDate>2015-02-13T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>swing component settings</title>
                <description>
&lt;h3 id=&quot;setting-component-sizes&quot;&gt;Setting Component Sizes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Layout Manger determines the size of the component.&lt;/p&gt;

    &lt;p&gt;use preferred size&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Dimension dim = getPreferredSize();
		
     dim.width = 250;
		
     setPreferredSize(dim); // tell the layout managers what size and the components want to be.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-borders&quot;&gt;Setting Borders&lt;/h2&gt;

&lt;p&gt;Border innerBorder = BorderFactory.createTitleBorder(&amp;#8220;Add Person&amp;#8221;);&lt;/p&gt;

&lt;p&gt;Border outBorder = BorderFactory.createEmptyBorder(5,5,5,5);&lt;/p&gt;

&lt;p&gt;setBorder( BorderFactory.createCompundBorder(outBorder,innerBorder);&lt;/p&gt;

</description>
                <link>/swing/2015/02/09/swing-component-settings</link>
                <guid>/swing/2015/02/09/swing-component-settings</guid>
                <pubDate>2015-02-09T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>listeners and events using interfaces to cleanly separate components</title>
                <description>
&lt;ol&gt;
  &lt;li&gt;create xxxListener&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;interface StringListener {
	public void textEmitted(String text)	
} &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;toolbar 
add attribute  : private StringListener listener;
add set method : public void setStringListener(StringListener listener){&lt;/p&gt;

    &lt;p&gt;}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MainFrame (Controller)&lt;/p&gt;

    &lt;p&gt;toolbar.setStringListener( new StringListener () {&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; public void textEmitted(String text) {
		
     textPanel.appendText(text);	
	
 }  });
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>/swing/2015/02/09/listeners-and-events-using-interfaces-to-cleanly-separate-components</link>
                <guid>/swing/2015/02/09/listeners-and-events-using-interfaces-to-cleanly-separate-components</guid>
                <pubDate>2015-02-09T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>image_video_processing_image_restoration</title>
                <description>
&lt;p&gt;image restoration and reconstriction&lt;/p&gt;

&lt;p&gt;noise&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;[Gaussian noise] (http://en.wikipedia.org/wiki/Gaussian_noise)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.Rayleigh&lt;/p&gt;

&lt;p&gt;3.gamma&lt;/p&gt;

&lt;p&gt;4.Exponentaial&lt;/p&gt;

&lt;p&gt;5.Uniform&lt;/p&gt;

&lt;p&gt;6.impulse&lt;/p&gt;

</description>
                <link>/image/2015/02/08/image_video_processing_image_restoration</link>
                <guid>/image/2015/02/08/image_video_processing_image_restoration</guid>
                <pubDate>2015-02-08T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>swingUtilities</title>
                <description>
&lt;p&gt;&lt;a href=&quot;http://blog.micxp.com/index.php/archives/109/&quot;&gt;Java GUI编程SwingUtilities.invokeLater作用&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;eventdispatchthread&quot;&gt;EventDispatchThread&lt;/h3&gt;

&lt;p&gt;Event-dispatching thread&lt;/p&gt;

&lt;p&gt;All events are processed by the listeners that receive them within the event-dispatching thread (an instance of java.awt.EventDispatchThread).&lt;/p&gt;

&lt;p&gt;All painting and component layout is expected to occur within this thread as well.&lt;/p&gt;

&lt;p&gt;The event-dispatching thread is of primary importance to Swing and AWT, and plays a key role in keeping updates to component state and display in an app under control. &lt;/p&gt;

&lt;p&gt;Associated with this thread is a FIFO queue of events – the system event queue (an instance of java.awt.EventQueue).&lt;/p&gt;

&lt;p&gt;This gets filled up, as any FIFO queue, in a serial fashion.&lt;/p&gt;

&lt;p&gt;Each request takes its turn executing event handling code, whether this be updating component properties, layout, or repainting.&lt;/p&gt;

&lt;p&gt;All events are processed serially to avoid such situations as a component’s state being modified in the middle of a repaint.&lt;/p&gt;

&lt;p&gt;Knowing this, we must be careful not to dispatch events outside of the event-dispatching thread.&lt;/p&gt;

&lt;p&gt;For instance, calling a fireXX() method directly from a separate thread of execution is unsafe.&lt;/p&gt;

&lt;p&gt;We must also be sure that event handling code, and painting code can be executed quickly.&lt;/p&gt;

&lt;p&gt;Otherwise the whole system event queue will be blocked waiting for one event process, repaint, or layout to occur, and our application will appear frozen or locked up.&lt;/p&gt;
</description>
                <link>/swing/2015/02/04/swingutilities</link>
                <guid>/swing/2015/02/04/swingutilities</guid>
                <pubDate>2015-02-04T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>swing resources</title>
                <description>
&lt;h2 id=&quot;swing-resources&quot;&gt;Swing resources&lt;/h2&gt;

&lt;h3 id=&quot;eclipse-plugin&quot;&gt;Eclipse plugin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://eclipse.org/windowbuilder/download.php&quot;&gt;Window Builder Pro&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://da2i.univ-lille1.fr/doc/tutorial-java/ui/features/components.html&quot;&gt;visual guide swing components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html&quot;&gt;visual guide swing layout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/&quot;&gt;Java™ Platform, Standard Edition 7 API Specification&lt;/a&gt;&lt;/p&gt;

</description>
                <link>/swing/2015/02/04/swing_resources</link>
                <guid>/swing/2015/02/04/swing_resources</guid>
                <pubDate>2015-02-04T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>creating a basic swing application</title>
                <description>
&lt;h2 id=&quot;why-to-use-swingutilitiesinvokelater-in-main-method&quot;&gt;Why to use SwingUtilities.invokeLater in main method?&lt;/h2&gt;

&lt;h3 id=&quot;the-docs-explain-why-from-initial-threadshttpdocsoraclecomjavasetutorialuiswingconcurrencyinitialhtml&quot;&gt;The docs explain why. &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&quot;&gt;From Initial Threads&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Why does not the initial thread simply create the GUI itself? Because almost all code that creates or interacts with Swing components must run on the event dispatch thread.&lt;/p&gt;

&lt;h3 id=&quot;from-the-event-dispatch-threadhttpdocsoraclecomjavasetutorialuiswingconcurrencydispatchhtml&quot;&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html&quot;&gt;From The Event Dispatch Thread&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Some Swing component methods are labelled &amp;#8220;thread safe&amp;#8221; in the API specification; these can be safely invoked from any thread. All other Swing component methods must be invoked from the event dispatch thread.&lt;/p&gt;

&lt;p&gt;Programs that ignore this rule may function correctly most of the time, but are subject to unpredictable errors that are difficult to reproduce.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SwingUtilities.invokeLater(new Runnable() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;	public void run() {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;		JFrame frame = new JFrame(&quot;Hello World&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;		frame.setSize(600, 500);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;		frame.setVisible(true);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;	}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;application-startup-code&quot;&gt;Application startup code&lt;/h3&gt;

&lt;p&gt;There&amp;#8217;s one place where it&amp;#8217;s very easy to forget that we need SwingUtilities.invokeLater(), and &lt;strong&gt;that&amp;#8217;s on application startup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our applications main() method&lt;/strong&gt; will always be called by &lt;strong&gt;a special &amp;#8220;main&amp;#8221; thread that the VM starts up for us&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And this main thread is not the event dispatch thread!&lt;/strong&gt; So:&lt;/p&gt;

&lt;p&gt;The code that initialises our GUI must also take place in an invokeLater().&lt;/p&gt;

&lt;p&gt;So our initial main() method should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyApplication extends JFrame {

	public static void main(String[] args) {

		SwingUtilities.invokeLater(new Runnable() {

			public void run() {

				MyApplication app = new MyApplication();

				app.setVisible(true);

			}

		});
	}

	private MyApplication() {

		// create UI here: add buttons, actions etc

	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;a-visual-guide-to-layout-managershttpdocsoraclecomjavasetutorialuiswinglayoutvisualhtml&quot;&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html&quot;&gt;A Visual Guide to Layout Managers&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;several-awt-and-swing-classes-provide-layout-managers-for-general-use&quot;&gt;Several AWT and Swing classes provide layout managers for general use:&lt;/h3&gt;

&lt;p&gt;1.BorderLayout (Every content pane is initialized to use a BorderLayout.)&lt;/p&gt;

&lt;p&gt;2.BoxLayout&lt;/p&gt;

&lt;p&gt;3.CardLayout&lt;/p&gt;

&lt;p&gt;4.FlowLayout&lt;/p&gt;

&lt;p&gt;5.GridBagLayout&lt;/p&gt;

&lt;p&gt;6.GridLayout&lt;/p&gt;

&lt;p&gt;7.GroupLayout&lt;/p&gt;

&lt;p&gt;8.SpringLayout&lt;/p&gt;

&lt;p&gt;&amp;#8216;public class MainFrame extends JFrame { &amp;#8216;&lt;/p&gt;

&lt;p&gt;&amp;#8217;&amp;#8230;&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;	public MainFrame() {&amp;#8216;&lt;/p&gt;

&lt;p&gt;&amp;#8217;	&amp;#8230;&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;		setLayout(new BorderLayout());&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;	&amp;#8230;&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;		add(textArea, BorderLayout.CENTER);&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;		add(btn, BorderLayout.SOUTH);&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;	}&amp;#8217;&lt;/p&gt;

&lt;p&gt;&amp;#8217;}&amp;#8217;&lt;/p&gt;

&lt;h3 id=&quot;the-observer-pattern&quot;&gt;The Observer pattern&lt;/h3&gt;

&lt;p&gt;In Design Patterns, the authors describe the Observer pattern like this:&lt;/p&gt;

&lt;p&gt;Define a one to many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.&lt;/p&gt;

&lt;p&gt;The Observer pattern has one subject and potentially many observers.&lt;/p&gt;

&lt;p&gt;Observers register with the subject, which notifies the observers when events occur.&lt;/p&gt;

&lt;p&gt;The prototypical Observer example is a graphical user interface (GUI) that simultaneously displays two views of a single model; the views register with the model, and when the model changes, it notifies the views, which update accordingly.&lt;/p&gt;

&lt;h3 id=&quot;the-decorator-pattern&quot;&gt;The Decorator Pattern&lt;/h3&gt;
</description>
                <link>/swing/2015/02/04/creating-a-basic-swing-application</link>
                <guid>/swing/2015/02/04/creating-a-basic-swing-application</guid>
                <pubDate>2015-02-04T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Working with Forms</title>
                <description>
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Problem&lt;/td&gt;
      &lt;td&gt;Solution&lt;/td&gt;
      &lt;td&gt;Listing&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;using-form-elements-with-two-way-data-bindings&quot;&gt;Using Form Elements with Two-Way Data Bindings&lt;/h3&gt;

&lt;p&gt;..&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; ng-model=&quot;item.complete&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;implicitly-creating-model-properties&quot;&gt;Implicitly Creating Model Properties&lt;/h3&gt;

&lt;p&gt;The previous example operates on model properties that I explicitly defined when I set up the controller, but you can also &lt;strong&gt;use two-way data bindings to implicitly create properties in the data model&lt;/strong&gt;—a feature that is useful when you are using form elements to gather data from the user in order to create a new object or property in the data model.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;col-xs-6&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;well&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;form-group row&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;label for=&quot;actionText&quot;&amp;gt;Action:&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;input id=&quot;actionText&quot; class=&quot;form-control&quot;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;ng-model=&quot;newTodo.action&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;form-group row&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;label for=&quot;actionLocation&quot;&amp;gt;Location:&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;select id=&quot;actionLocation&quot; class=&quot;form-control&quot;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;ng-model=&quot;newTodo.location&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Home&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Office&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Mall&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;/select&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn btn-primary btn-block&quot;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;ng-click=&quot;addNewItem(newTodo)&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input id=&quot;actionText&quot; class=&quot;form-control&quot; ng-model=&quot;newTodo.action&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;and this select element:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select id=&quot;actionLocation&quot; class=&quot;form-control&quot; ng-model=&quot;newTodo.location&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Home&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Office&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;Mall&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/select&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;They both use the ng-model directive, &lt;strong&gt;configured to update model properties that I have not explicitly defined: the newTodo.action and newTodo.location properties&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;checking-that-the-data-model-object-has-been-created&quot;&gt;Checking That the Data Model Object Has Been Created&lt;/h3&gt;

&lt;p&gt;Using an implicitly defined object on which properties are defined has some benefits, &lt;strong&gt;such as being able to call the behavior that processes the data in a clean and simple way&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But it has a drawback as well, which you can see &lt;strong&gt;if you reload the forms.html file in the browser and click the Add button without editing the input element or selecting an option for the select element&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The interface won’t change when you click the button, but you’ll see an error message like this one in the JavaScript console:&lt;/p&gt;

&lt;p&gt;TypeError: Cannot read property ‘action’ of undefined&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem is that my controller behavior is trying to access properties on an object that AngularJS won’t create until the one of the form controls has been modified, triggering the ng-model directive.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When relying on implicit definition, &lt;strong&gt;it is important to write your code to cater for the possibility that the objects or properties you are going to use do not yet exist&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$scope.addNewItem = function (newItem) {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;if (angular.isDefined(newItem) &amp;amp;&amp;amp; angular.isDefined(newItem.action) &amp;amp;&amp;amp; angular.isDefined(newItem.location)) {&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;$scope.todos.push({&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;action: newItem.action + &quot; (&quot; + newItem.location + &quot;)&quot;,&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;complete: false&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;}); }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;validating-forms&quot;&gt;Validating Forms&lt;/h2&gt;

&lt;h3 id=&quot;performing-basic-form-validation&quot;&gt;Performing Basic Form Validation&lt;/h3&gt;

&lt;p&gt;AngularJS provides basic form validation by honoring the standard HTML element attributes, such as type and required, and adding some directives.&lt;/p&gt;

&lt;h3 id=&quot;adding-the-form-element&quot;&gt;Adding the Form Element&lt;/h3&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form name=&quot;myForm&quot; novalidate ng-submit=&quot;addUser(newUser)&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are some attributes you must set on the form element to get the best results from AngularJS form validation.&lt;/p&gt;

&lt;p&gt;The first is the &lt;strong&gt;name attribute&lt;/strong&gt;; the directive that replaces the form element defines some useful variables that report on the validity of the form data and accesses these values via the value of the name property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To disable the browser validation support and enable the AngularJS features&lt;/strong&gt;, I have &lt;strong&gt;added the novalidate attribute to my form element&lt;/strong&gt;, which is defined by the HTML5 specification and tells the browser not to try to validate the form itself, allowing AngularJS to work unhindered.&lt;/p&gt;

&lt;p&gt;The last addition to the &lt;strong&gt;form element is the ng-submit directive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a reminder, this directive specifies a custom response to a submit event, which is triggered when the user submits the form (in this example by clicking the OK button).&lt;/p&gt;

&lt;h3 id=&quot;using-validation-attributes&quot;&gt;Using Validation Attributes&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input name=&quot;userEmail&quot; type=&quot;email&quot; class=&quot;form-control&quot;&lt;/code&gt;
&amp;gt;&lt;code&gt;required ng-model=&quot;newUser.email&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The type Attribute Values for Input Elements&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Type Value&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;checkbox&lt;/td&gt;
      &lt;td&gt;Creates a check box (pre-dates HTML5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;email&lt;/td&gt;
      &lt;td&gt;Creates a text input that accepts an e-mail address (new in HTML5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;Creates a text input that accepts a number address (new in HTML5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;radio&lt;/td&gt;
      &lt;td&gt;Creates a radio button (pre-dates HTML5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;text&lt;/td&gt;
      &lt;td&gt;Creates a standard text input that accepts any value (pre-dates HTML5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;url&lt;/td&gt;
      &lt;td&gt;Creates a text input that accepts a URL (new in HTML5)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input name=&quot;userName&quot; type=&quot;text&quot; class=&quot;form-control&quot; required ng-model=&quot;newUser.name&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input name=&quot;agreed&quot; type=&quot;checkbox&quot; ng-model=&quot;newUser.agreed&quot; required&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h3 id=&quot;monitoring-the-validity-of-the-form&quot;&gt;Monitoring the Validity of the Form&lt;/h3&gt;

&lt;p&gt;The directives that AngularJS uses to replace the standard form elements define special variables that you can use to check the validation state of individual elements or the form as a whole.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$pristine&lt;/td&gt;
      &lt;td&gt;Returns true if the user has &lt;strong&gt;not interacted&lt;/strong&gt; with the element/form&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$dirty&lt;/td&gt;
      &lt;td&gt;Returns true if the user has interacted with the element/form&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$valid&lt;/td&gt;
      &lt;td&gt;Returns true if the contents of the element/form are valid&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$invalid&lt;/td&gt;
      &lt;td&gt;Returns true if the contents of the element/form are invalid&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$error&lt;/td&gt;
      &lt;td&gt;Provides details of validation errors—see the “Providing Form Validation Feedback” section for details&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;Valid: &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-primary btn-block&quot; ng-disabled=&quot;myForm.$invalid&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OK &amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h2 id=&quot;providing-form-validation-feedback&quot;&gt;Providing Form Validation Feedback&lt;/h2&gt;

&lt;p&gt;AngularJS performs validation checks as the user is interacting with the form elements, and we can use the information that these checks provide to give the user meaningful feedback in real time, rather than waiting until they are ready to submit the data.&lt;/p&gt;

&lt;h3 id=&quot;using-css-to-provide-feedback&quot;&gt;Using CSS to Provide Feedback&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Each time the user interacts with an element&lt;/strong&gt; that is being validated, AngularJS checks its state to see whether it is valid.&lt;/p&gt;

&lt;p&gt;The validity checks depend on the element type and how it has been configured.&lt;/p&gt;

&lt;p&gt;AngularJS reports on the outcome of these validation checks by adding and removing the elements it validates from a set of classes, which can be combined with CSS to provide feedback to the user by styling the element.&lt;/p&gt;

&lt;p&gt;AngularJS uses four basic classes:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-pristine&lt;/td&gt;
      &lt;td&gt;Elements that the user has not interacted are added to this class.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-dirty&lt;/td&gt;
      &lt;td&gt;Elements that the user has interacted are added to this class.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-valid&lt;/td&gt;
      &lt;td&gt;Elements that are valid are in this class.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-invalid&lt;/td&gt;
      &lt;td&gt;Elements that are not valid are in this class.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;
&amp;gt;&lt;code&gt;form .ng-invalid.ng-dirty { background-color: lightpink; }&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;form .ng-valid.ng-dirty { background-color: lightgreen; }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;span.summary.ng-invalid { color: red; font-weight: bold; }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;span.summary.ng-valid { color: green; }&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;well&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Message: {{message}}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Valid:&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;span class=&quot;summary&quot; ng-class=&quot;myForm.$valid ? 'ng-valid' : 'ng-invalid'&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;{{myForm.$valid}}&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;providing-feedback-for-specific-validation-constraints&quot;&gt;Providing Feedback for Specific Validation Constraints&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;form .ng-invalid-required.ng-dirty { background-color: lightpink; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;form .ng-invalid-email.ng-dirty { background-color:lightgoldenrodyellow; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;form .ng-valid.ng-dirty { background-color: lightgreen; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;span.summary.ng-invalid {color: red; font-weight: bold; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;span.summary.ng-valid { color: green }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;AngularJS will add the element to the &lt;strong&gt;ng-valid-required&lt;/strong&gt; and &lt;strong&gt;ng-invalid-required classes&lt;/strong&gt; to signal compliance with the required attribute and &lt;em&gt;*use the ng-valid-email and ng-invalid-email classes&lt;/em&gt; to single compliance with the formatting constraint.&lt;/p&gt;

&lt;h3 id=&quot;using-the-special-variables-to-provide-feedback&quot;&gt;Using the Special Variables to Provide Feedback&lt;/h3&gt;

&lt;p&gt;AngularJS provides a set of special variables for form validation that you can use in views to check the validation status of individual elements and of the form as a whole.&lt;/p&gt;

&lt;p&gt;I used these variables to control the disabled state of a button in earlier examples by applying the ng-disabled directive, but they can also be used to control visibility of elements that give feedback to the user by applying them with the ng-show directive.&lt;/p&gt;

&lt;p&gt;..&lt;/p&gt;

&lt;p&gt;&lt;code&gt;div.error {color: red; font-weight: bold;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;error&quot;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;ng-show=&quot;myForm.userEmail.$invalid &amp;amp;&amp;amp; myForm.userEmail.$dirty&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;span ng-show=&quot;myForm.userEmail.$error.email&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Please enter a valid email address&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;span ng-show=&quot;myForm.userEmail.$error.required&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Please enter a value&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;reducing-the-number-of-feedback-elements&quot;&gt;Reducing the Number of Feedback Elements&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$scope.getError = function (error) {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;if (angular.isDefined(error)) {&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;if (error.required) {&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;return &quot;Please enter a value&quot;;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;} else if (error.email) {&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;return &quot;Please enter a valid email address&quot;;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;}}&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;error&quot; ng-show=&quot;myForm.userEmail.$invalid &amp;amp;&amp;amp; myForm.userEmail.$dirty&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{getError(myForm.userEmail.$error)}}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;deferring-validation-feedback&quot;&gt;Deferring Validation Feedback&lt;/h3&gt;

&lt;p&gt;}
}&lt;/p&gt;
</description>
                <link>/angularjs/2014/12/21/working-with-forms</link>
                <guid>/angularjs/2014/12/21/working-with-forms</guid>
                <pubDate>2014-12-21T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Using Element and Event Directives</title>
                <description>
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Problem&lt;/td&gt;
      &lt;td&gt;Solution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Show or hide elements.&lt;/td&gt;
      &lt;td&gt;Use the &lt;strong&gt;ng-show and ng-hide directives&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Remove elements from the DOM.&lt;/td&gt;
      &lt;td&gt;Use the &lt;strong&gt;ng-if directive&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Avoid the transclusion problem when generating elements that can’t have an intermediate parent element.&lt;/td&gt;
      &lt;td&gt;Use the &lt;strong&gt;ng-repeat directive with a filter&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Assign elements to classes or set individual CSS style properties.&lt;/td&gt;
      &lt;td&gt;Use the &lt;strong&gt;ng-class or ng-style&lt;/strong&gt; directive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Assign different classes to &lt;strong&gt;odd and even elements generated by the ng-repeat directive&lt;/strong&gt;.&lt;/td&gt;
      &lt;td&gt;Use the ng-class-odd and ng-class-even directives.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Define behavior to be performed when an event is triggered.&lt;/td&gt;
      &lt;td&gt;Use an event directive such as ng-click.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Handle an event for which AngularJS does not provide a directive.&lt;/td&gt;
      &lt;td&gt;Create a custom event directive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Apply Boolean attributes to elements.&lt;/td&gt;
      &lt;td&gt;Use one of the Boolean attribute directives, such as ng-checked.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;using-the-element-directives&quot;&gt;Using the Element Directives&lt;/h3&gt;

&lt;p&gt;The first set of directives are used to configure and style elements in the Document Object Model (DOM).&lt;/p&gt;

&lt;p&gt;These directives are useful for managing the way that an application displays content and data and, since this is AngularJS, for using bindings to change the HTML document dynamically when the data model changes.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Directive&lt;/td&gt;
      &lt;td&gt;Applied As&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-if&lt;/td&gt;
      &lt;td&gt;Attribute Attribute&lt;/td&gt;
      &lt;td&gt;Adds and removes elements from the DOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-class&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Sets the class attribute for an element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-class-even&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Sets the class attribute for even-numbered elements generated within the ng-repeat directive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-class-odd&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Sets the class attribute for odd-numbered elements generated within the ng-repeat directive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-hide&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Shows and hides elements in the DOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-show&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Shows and hides elements in the DOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-style&lt;/td&gt;
      &lt;td&gt;Attribute Attribute, class&lt;/td&gt;
      &lt;td&gt;Sets one or more CSS properties&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;showing-hiding-and-removing-elements&quot;&gt;Showing, Hiding, and Removing Elements&lt;/h3&gt;

&lt;p&gt;Many of the directives in this category control whether elements are visible to the user, either by hiding them or by removing them completely from the DOM.&lt;/p&gt;

&lt;p&gt;The ng-show and ng-hide directives control element visibility by adding and removing elements from a class called, confusingly, ng-hide.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ng-hide class&lt;/strong&gt; applies a &lt;strong&gt;CSS style that sets the display property to none, removing the element from view&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The difference between ng-show and ng-hide is that &lt;strong&gt;ng-show hides elements when its expression evaluates to false&lt;/strong&gt; and &lt;strong&gt;ng-hid hides elements when its expression evaluates to true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;span ng-hide=&quot;item.complete&quot;&amp;gt;(Incomplete)&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;span ng-show=&quot;item.complete&quot;&amp;gt;(Done)&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;td &amp;gt; *:first-child {font-weight: bold}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;The problem is that &lt;strong&gt;the ng-show and ng-hide directives&lt;/strong&gt; leave the elements they manage in the DOM and &lt;strong&gt;just hide them from the user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;They are not hidden from the browser, as it were, and so &lt;strong&gt;position-based CSS selectors&lt;/strong&gt; like this one will count hidden elements.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;span ng-if=&quot;!item.complete&quot;&amp;gt;(Incomplete)&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;span ng-if=&quot;item.complete&quot;&amp;gt;(Done)&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;avoiding-table-striping-problems-and-conflicts-with-ng-repeat&quot;&gt;Avoiding Table Striping Problems and Conflicts with ng-repeat&lt;/h3&gt;

&lt;p&gt;The ng-show, ng-hide, and ng-if directives all have problems when they are applied to the elements that make up tables, which is a shame because new AngularJS developers often try to use the directives to manage the contents displayed by tables.&lt;/p&gt;

&lt;p&gt;The answer is to use a filter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table class=&quot;table table-striped&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Action&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Done&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos | filter: {complete: 'false'}&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.action}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.complete}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h3 id=&quot;managing-classes-and-css&quot;&gt;Managing Classes and CSS&lt;/h3&gt;

&lt;p&gt;AngularJS provides a set of directives that are used to assign elements to classes and set individual CSS properties.&lt;/p&gt;

&lt;p&gt;You can see the first two of these directives—ng-class and ng-style.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; ng-class=&quot;settings.Rows&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.action}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td ng-style=&quot;{'background-color': settings.Columns}&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;{{item.complete}}&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;assigning-odd-and-even-classes&quot;&gt;Assigning Odd and Even Classes&lt;/h3&gt;

&lt;p&gt;A variation on the ng-class directive is offered by the ng-class-odd and ng-class-even directives, which are used within an ng-repeat directive and apply classes only to odd- or even-numbered elements.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; ng-class-even=&quot;settings.Rows&quot;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;ng-class-odd=&quot;settings.Columns&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.action}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.complete}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;handling-events&quot;&gt;Handling Events&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-blur&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the blur event, which is triggered when an element loses the focus.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-change&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the change event, which is triggered by &lt;strong&gt;form elements when their state of content is changed&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-click&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the click event, which is triggered when the user clicks the mouse/pointer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-copy&lt;br /&gt;ng-cut&lt;br /&gt;ng-paste&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a &lt;strong&gt;custom behavior for the copy, cut, and paste events&lt;/strong&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-dblclick&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the dblclick event, which is triggered when the user double-clicks the mouse/pointer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-focus&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the focus event, which is triggered when an element gains the focus.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-keydown&lt;br /&gt;ng-keypress&lt;br /&gt;ng-keyup&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies custom behavior for the keydown, keyup, and keypress events, which are triggered when the user presses/releases a key.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-mousedown&lt;br /&gt;ng-mouseenter&lt;br /&gt;ng-mouseleave&lt;br /&gt;ng-mousemove&lt;br /&gt;ng-mouseover&lt;br /&gt;ng-mouseup&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies custom behavior for the six standard mouse events (mousedown, mouseenter, mouseleave, movemove, mouseover, and mouseup), which are triggered when the user interacts with an element using the mouse/pointer.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-submit&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Specifies a custom behavior for the submit event, which is triggered when a form is submitted.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The event handler directives can be used to &lt;strong&gt;evaluate an expression directly or to invoke a behavior in the controller&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have applied the ng-click directive to a set of button elements that I generate using the ng-repeat directive.&lt;/p&gt;

&lt;p&gt;The expression that I have specified will be evaluated when one of the buttons is clicked, directly updating a value in the data model, as follows:&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn btn-info&quot; ng-click=&quot;data.rowColor = button&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{button}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;If you are &lt;strong&gt;uncomfortable using inline expression&lt;/strong&gt;—and many developers are—or if you need to &lt;strong&gt;perform complex logic&lt;/strong&gt;, then you can &lt;strong&gt;define a behavior in the controller and invoke it from the event directive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; ng-class=&quot;data.rowColor&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-mouseenter=&quot;handleEvent($event)&quot; ng-mouseleave=&quot;handleEvent($event)&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I have applied the ng-mouseenter and ng-mouseleave directives to the tr elements, specifying that the handleEvent behavior should be invoked.&lt;/p&gt;

&lt;p&gt;This is similar to the traditional model of JavaScript event handling, and to access the Event object, I use the &lt;strong&gt;special $event variable, which all of the event directives define&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You must be careful when handling events in behaviors because there is a mismatch between the event names that AngularJS uses for the names of the directives and the value of the type property of the underlying events&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this example, I have added directives to &lt;strong&gt;handle the mouseenter and mouseleave events&lt;/strong&gt;, but I receive different events in the behavior function:&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$scope.handleEvent = function (e) {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;console.log(&quot;Event type: &quot; + e.type);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;$scope.data.columnColor = e.type == &quot;mouseover&quot; ? &quot;Green&quot; : &quot;Blue&quot;;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;The safest way to figure out which events you will receive in the behavior is to set up the function and use console.log to write the value of the type property to the console.&lt;/p&gt;

&lt;p&gt;In this way, I am able to tell that the &lt;strong&gt;mouseenter event&lt;/strong&gt; will really &lt;strong&gt;be presented as mouseover&lt;/strong&gt; and that the &lt;strong&gt;mouseleave event&lt;/strong&gt; will be represented by &lt;strong&gt;mouseout&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-custom-event-directive&quot;&gt;Creating a Custom Event Directive&lt;/h3&gt;

&lt;p&gt;I am going to show you how to create a &lt;strong&gt;simple directive that you can use in your own projects to handle events for which AngularJS doesn’t provide a built-in directive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have created a directive that handles the touchstart and touchend events, which are trigged by touch-enabled devices when the user taps and releases the screen.&lt;/p&gt;

&lt;h2 id=&quot;managing-special-attributes&quot;&gt;Managing Special Attributes&lt;/h2&gt;

&lt;h3 id=&quot;managing-boolean-attributes&quot;&gt;Managing Boolean Attributes&lt;/h3&gt;

&lt;p&gt;The significance of most HTML attributes is driven by the value assigned to the attribute, but some HTML attributes have an effect by their presence on an element, irrespective of their value.&lt;/p&gt;

&lt;p&gt;These are known as Boolean attributes.&lt;/p&gt;

&lt;p&gt;A good example is the disabled attribute; a button element, for instance, is disabled when the disabled attribute is applied, even when the attribute has no value, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn&quot; disabled&amp;gt;My Button&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The only values that can be set for the disabled attribute are the empty string, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn&quot; disabled=&quot;&quot;&amp;gt;My Button&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or disabled, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn&quot; disabled=&quot;disabled&quot;&amp;gt;My Button&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What you can’t do is set the disabled attribute to false in order to enable a button.&lt;/p&gt;

&lt;p&gt;This kind of attribute runs counter to the data binding approach that AngularJS uses.&lt;/p&gt;

&lt;p&gt;To solve this problem, AngularJS contains a number of directives that can be used to manage Boolean attributes&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Dirctive&lt;/td&gt;
      &lt;td&gt;Applied As&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-checked&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Manages the checked attribute (used on input elements)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-disabled&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Manages the disabled attribute (used on input and button elements)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-open&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Manages the open attribute (used on details elements)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-readonly&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Manages the readonly attribute (used on input elements)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-selected&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Manages the selected attribute (used on option elements)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;angular.module(&quot;exampleApp&quot;, [])&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;.controller(&quot;defaultCtrl&quot;, function ($scope) {&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;$scope.dataValue = false;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;….&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;checkbox well&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; ng-model=&quot;dataValue&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Set the Data Value&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button class=&quot;btn btn-success&quot; ng-disabled=&quot;dataValue&quot;&amp;gt;My Button&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;managing-other-attributes&quot;&gt;Managing Other Attributes&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Directive&lt;/td&gt;
      &lt;td&gt;Applied As&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-href&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Sets the href attribute on a elements.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-src&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Sets the src attribute on img elements.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-srcset&lt;/td&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Sets the srcset attribute on img elements. The srcset attribute is a draft standard to extend HTML5, allowing for multiple images to be specified for different display sizes and pixel densities. Browser support is limited as I write this.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
                <link>/angularjs/2014/12/17/using-element-and-event-directives</link>
                <guid>/angularjs/2014/12/17/using-element-and-event-directives</guid>
                <pubDate>2014-12-17T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Using Binding and Template Directives</title>
                <description>
&lt;h1 id=&quot;using-binding-and-template-directives&quot;&gt;Using Binding and Template Directives&lt;/h1&gt;

&lt;p&gt;Directives are the most powerful AngularJS feature; they allow you to extend HTML to create the foundation for rich and complex web applications in a way that is naturally expressive.&lt;/p&gt;

&lt;h2 id=&quot;why-and-when-to-use-directives&quot;&gt;Why and When to Use Directives&lt;/h2&gt;

&lt;p&gt;Directives are the signature feature of AngularJS, setting the overall style of AngularJS development and the shape of an AngularJS application.&lt;/p&gt;

&lt;p&gt;AngularJS comes with more than 50 built-in directives that provide access to core features that are useful in almost every web application including &lt;strong&gt;data binding&lt;/strong&gt;, &lt;strong&gt;form validation&lt;/strong&gt;, &lt;strong&gt;template generation&lt;/strong&gt;, &lt;strong&gt;event handling&lt;/strong&gt;, and &lt;strong&gt;manipulating HTML elements&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;why&quot;&gt;Why&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Directives expose core AngularJS functionality such as &lt;strong&gt;event handling, form validation, and templates&lt;/strong&gt;. You use custom directives to apply your application features to views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;when&quot;&gt;When&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Directives are used throughout an AngularJS application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;using-the-data-binding-directives&quot;&gt;Using the Data Binding Directives&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The first category of built-in directives&lt;/strong&gt; is responsible for performing &lt;strong&gt;data binding&lt;/strong&gt;, which is one of the features that elevates AngularJS from a template package into a full-fledged application development framework.&lt;/p&gt;

&lt;p&gt;Data binding uses values &lt;strong&gt;from the model and inserts them into the HTML document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Data Binding Directives&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Directive&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Applied As&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-bind&lt;/td&gt;
      &lt;td&gt;Attribute, class&lt;/td&gt;
      &lt;td&gt;Binds the innerText property of an HTML element.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-bind-html&lt;/td&gt;
      &lt;td&gt;Attribute, class&lt;/td&gt;
      &lt;td&gt;Creates data bindings using the innerHTML property of an HTML element. This is potentially dangerous because it means that the browser will interpret the content as HTML, rather than content.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-bind-template&lt;/td&gt;
      &lt;td&gt;Attribute, class&lt;/td&gt;
      &lt;td&gt;Similar to the ng-bind directive but allows for multiple template expressions to be specified in the attribute value.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ng-model&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Attribute, class&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Creates a two-way data binding.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-non-bindable&lt;/td&gt;
      &lt;td&gt;Attribute, class&lt;/td&gt;
      &lt;td&gt;Declares a region of content for which data binding will not be performed.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;applying-directives&quot;&gt;APPLYING DIRECTIVES&lt;/h3&gt;

&lt;p&gt;apply directives as &lt;strong&gt;attributes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;There are &amp;lt;span ng-bind=&quot;todos.length&quot;&amp;gt;&amp;lt;/span&amp;gt; items&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;configure directives using the &lt;strong&gt;standard class attribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;There are &amp;lt;span class=&quot;ng-bind: todos.length&quot;&amp;gt;&amp;lt;/span&amp;gt; items&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;performing-one-way-bindings-and-preventing-them&quot;&gt;Performing One-Way Bindings (and &lt;strong&gt;Preventing Them&lt;/strong&gt;)&lt;/h3&gt;

&lt;p&gt;AngularJS supports two kinds of data binding.&lt;/p&gt;

&lt;p&gt;The first, &lt;strong&gt;one-way binding&lt;/strong&gt;, means a value is taken from the data model and inserted into an HTML element.&lt;/p&gt;

&lt;p&gt;AngularJS bindings are live, which means that when the value associated with the binding is changed in the data model, the HTML element will be &lt;strong&gt;updated to display the new value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ng-bind directive&lt;/strong&gt; is responsible for creating one-way data bindings, but it is &lt;strong&gt;rarely used&lt;/strong&gt; directly because AngularJS will also create this kind of binding whenever it encounters &lt;strong&gt;the  characters&lt;/strong&gt; in the HTML document.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;There are {{todos.length}} items&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the most natural and expressive way of creating data bindings: The bindings are easy to read and fit naturally into the content of HTML elements.&lt;/p&gt;

&lt;p&gt;The second data binding uses &lt;strong&gt;the ng-bind directive&lt;/strong&gt;, which has the same effect but requires an additional element&lt;/p&gt;

&lt;p&gt;&lt;code&gt;There are &amp;lt;span ng-bind=&quot;todos.length&quot;&amp;gt;&amp;lt;/span&amp;gt; items&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The ng-bind directive replaces the content of the element that it is applied to, which means I &lt;strong&gt;have to add a span element&lt;/strong&gt; to create the effect I want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don’t use the ng-bind directive in my own projects; I prefer the inline bindings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aside from being a little awkward to use, the ng-bind directive is &lt;strong&gt;limited to being able to process a single data binding expression&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you need to create &lt;strong&gt;multiple data bindings&lt;/strong&gt;, then you should use &lt;strong&gt;the ng-bind-template directive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-bind-template=&quot;First: {{todos[0].action}}. Second: {{todos[1].action}}&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;preventing-inline-data-binding&quot;&gt;Preventing Inline Data Binding&lt;/h3&gt;

&lt;p&gt;The drawback of &lt;strong&gt;the inline bindings&lt;/strong&gt; is that AngularJS will &lt;strong&gt;find and process every set of  characters in your content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The solution is to use &lt;strong&gt;the ng-non-bindable directive&lt;/strong&gt;, &lt;strong&gt;which prevents AngularJS from processing inline bindings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-non-bindable&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;AngularJS uses {{ and }} characters for templates&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-two-way-data-bindings&quot;&gt;Creating Two-Way Data Bindings&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Two-way data bindings track changes in both directions, allowing elements that gather data from the user to modify the state of the application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Two-way bindings are created with &lt;strong&gt;the ng-model directive&lt;/strong&gt;, a single data model property can be used for both one- and two-way bindings.&lt;/p&gt;

&lt;p&gt;Two-way bindings can be applied &lt;strong&gt;only to elements that allow the user to provide a data value&lt;/strong&gt;, which means the &lt;strong&gt;input, textarea, and select elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Changes to data model properties are &lt;strong&gt;disseminated to all of the relevant bindings, ensuring that the application is kept in sync&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-the-template-directives&quot;&gt;Using the Template Directives&lt;/h2&gt;

&lt;p&gt;Data bindings are the core feature of AngularJS views, but on their own they are pretty limited.&lt;/p&gt;

&lt;p&gt;Web applications—or any kind of application for that matter—tend to operate on collections of similar data objects and vary the view they present to the user based on different data values.&lt;/p&gt;

&lt;p&gt;Fortunately, AngularJS includes &lt;strong&gt;a set of directives that can be used to generate HTML elements using templates&lt;/strong&gt;, making it easy to work with data collections and to add basic logic to a template that responds to the state of the data.&lt;/p&gt;

&lt;p&gt;The Template Directives&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Directive&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Applied As&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-cloak&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Applies a CSS style that hides inline binding expressions, which can be briefly visible when the document first loads&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-include&lt;/td&gt;
      &lt;td&gt;Element,Attribute,class&lt;/td&gt;
      &lt;td&gt;Loads, processes, and inserts a fragment of HTML into the Document Object Model&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ng-repeat&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Generates new copies of a single element and its contents for each object in an array or property on an object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-repeat-start&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Denotes the start of a repeating section with multiple top-level elements&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-repeat-end&lt;/td&gt;
      &lt;td&gt;Attribute,class&lt;/td&gt;
      &lt;td&gt;Denotes the end of a repeating section with multiple top-level elements&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ng-switch&lt;/td&gt;
      &lt;td&gt;Element,Attribute,class&lt;/td&gt;
      &lt;td&gt;Changes the elements in the Document Object Model based on the value of data bindings&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;generating-elements-repeatedly&quot;&gt;Generating Elements Repeatedly&lt;/h3&gt;

&lt;p&gt;One of the most common tasks in any view is to generate the same content for each item in a collection of data.&lt;/p&gt;

&lt;p&gt;In AngularJS this is done with &lt;strong&gt;the ng-repeat directive&lt;/strong&gt;, which is applied to the element that should be duplicated.&lt;/p&gt;

&lt;p&gt;There are two parts to using the ng-repeat directive.&lt;/p&gt;

&lt;p&gt;The first is to specify the source of the data objects and the name by which you want to refer to the object that is being processed from within the template&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The basic format of the value for the ng-repeat directive attribute is &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;, where source is an object or array defined by &lt;strong&gt;the controller $scope&lt;/strong&gt;, in this example the todos array.&lt;/p&gt;

&lt;p&gt;The directive iterates through the objects in the array, creates a new instance of the element and its content, and then processes the templates it contains.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;variable&amp;gt;&lt;/code&gt; name assigned in the directive attribute value can be used to refer to the current data object. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.action}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{item.complete}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In my example, I generate a tr element that contains td elements that, in turn, contain inline data bindings that refer to the action and complete properties of the current object.&lt;/p&gt;

&lt;p&gt;If you navigate to the directives.html file in the browser, AngularJS will &lt;strong&gt;process the directive and generate the following HTML elements&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;!-- ngRepeat: item in todos --&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;Get groceries&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;false&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;Call plumber&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;false&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;Buy running shoes&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;true&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;Buy flowers&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;false&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;Call family&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td class=&quot;ng-binding&quot;&amp;gt;false&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;repeating-for-object-properties&quot;&gt;Repeating for Object Properties&lt;/h3&gt;

&lt;p&gt;The previous example used the ng-repeat directive to &lt;strong&gt;enumerate the objects in an array&lt;/strong&gt;, but you can also &lt;strong&gt;enumerate the properties of an object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;prop in item&quot;&amp;gt;{{prop}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;working-with-data-object-keys&quot;&gt;Working with Data Object Keys&lt;/h3&gt;

&lt;p&gt;There is an alternative syntax for the ng-repeat directive configuration that allows you to &lt;strong&gt;receive a key with each property or data object that is processed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;(key, value) in item&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;{{key}}={{value}}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;
&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; class=&quot;ng-scope&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;!-- ngRepeat: (key, value) in item --&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;(key, value) in item&quot; class=&quot;ng-scope ng-binding&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;action=Get groceries&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;(key, value) in item&quot; class=&quot;ng-scope ng-binding&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;complete=false&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h3 id=&quot;working-with-the-built-in-variables&quot;&gt;Working with the Built-in Variables&lt;/h3&gt;

&lt;p&gt;The ng-repeat directive assigns the current object or property to the variable you specify, but there is also a set of built-in variables that provide context for the data being processed. &lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Variable&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$index&lt;/td&gt;
      &lt;td&gt;Returns the position of the current object or property&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$first&lt;/td&gt;
      &lt;td&gt;Returns true if the current object is the first in the collection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$middle&lt;/td&gt;
      &lt;td&gt;Returns true if the current object is neither the first nor last in the collection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$last&lt;/td&gt;
      &lt;td&gt;Returns true if the current object is the last in the collection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$even&lt;/td&gt;
      &lt;td&gt;Returns true for the even-numbered objects in a collection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$odd&lt;/td&gt;
      &lt;td&gt;Returns true for the odd-numbered objects in a collection&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;repeating-multiple-top-level-elements&quot;&gt;Repeating Multiple Top-Level Elements&lt;/h3&gt;

&lt;p&gt;The ng-repeat directive repeats a &lt;strong&gt;single top-level element&lt;/strong&gt; and its contents for each object or property that it processes.&lt;/p&gt;

&lt;p&gt;There are times, however, when you need to &lt;strong&gt;repeat multiple top-level elements for each data object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I encounter this problem most often when I need to generate multiple table rows for each data item that I am processing—something that is difficult to achieve with ng-repeat because no intermediate elements are allowed between tr elements and their parents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table class=&quot;table&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat-start=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;This is item {{$index}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;The action is: {{item.action}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat-end&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;Item {{$index}} is {{$item.complete? '' : &quot;not &quot;}} complete&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/tbody&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ng-repeat-start directive&lt;/strong&gt; is configured just like ng-repeat, but &lt;strong&gt;it repeats all of the top-level elements (and their contents) until (but including) the element to which the ng-repeat-end attribute has been applied&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;working-with-partial-views&quot;&gt;Working with Partial Views&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;ng-include directive&lt;/strong&gt; &lt;strong&gt;retrieves a fragment of HTML content from the server&lt;/strong&gt;, compiles it to process any directives that it might contain, and adds it to the Document Object Model.&lt;/p&gt;

&lt;p&gt;These fragments are known as partial views.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div id=&quot;todoPanel&quot; class=&quot;panel&quot; ng-controller=&quot;defaultCtrl&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;h3 class=&quot;panel-header&quot;&amp;gt;To Do List&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;ng-include src=&quot;'table.html'&quot;&amp;gt;&amp;lt;/ng-include&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Configuration Parameters of the ng-include Directive&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Name&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;src&lt;/td&gt;
      &lt;td&gt;Specifies the URL of the content to load&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;onload&lt;/td&gt;
      &lt;td&gt;Specifies an expression to be evaluated when the content is loaded&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;autoscroll&lt;/td&gt;
      &lt;td&gt;Specifies whether AngularJS should scroll the viewport when the content is loaded&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;selecting-partial-views-dynamically&quot;&gt;Selecting Partial Views Dynamically&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;angular.module(&quot;exampleApp&quot;, [])&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;.controller(&quot;defaultCtrl&quot;, function ($scope) {&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;$scope.viewFile = function () {&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;return $scope.showList ? &quot;list.html&quot; : &quot;table.html&quot;;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;….&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;ng-include src=&quot;viewFile()&quot;&amp;gt;&amp;lt;/ng-include&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-the-ng-include-directive-as-an-attribute&quot;&gt;Using the ng-include Directive as an Attribute&lt;/h3&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-include=&quot;viewFile()&quot; onload=&quot;reportChange()&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ng-include attribute can be applied to any HTML element&lt;/strong&gt;, and &lt;strong&gt;the value of the src parameter is taken from the attribute value&lt;/strong&gt;, which is viewFile() in this case.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;other directive configuration parameters are expressed as separate attributes&lt;/strong&gt;, which you can see with the onload attribute.&lt;/p&gt;

&lt;h3 id=&quot;conditionally-swapping-elements&quot;&gt;Conditionally Swapping Elements&lt;/h3&gt;

&lt;p&gt;The ng-include directive is excellent for managing more &lt;strong&gt;significant fragments of content in partial&lt;/strong&gt;, but often you need to &lt;strong&gt;switch between smaller chucks of content&lt;/strong&gt; that are already within the document—and for this, AngularJS provides the &lt;strong&gt;ng-switch directive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;well&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;radio&quot; ng-repeat=&quot;button in ['None', 'Table', 'List']&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;input type=&quot;radio&quot; ng-model=&quot;data.mode&quot;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;value=&quot;{{button}}&quot; ng-checked=&quot;$first&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;{{button}}&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch on=&quot;data.mode&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch-when=&quot;Table&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;table class=&quot;table&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Action&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Done&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; ng-class=&quot;$odd ? 'odd' : 'even'&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;prop in item&quot;&amp;gt;{{prop}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch-when=&quot;List&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;li ng-repeat=&quot;item in todos&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;{{item.action}}&amp;lt;span ng-if=&quot;item.complete&quot;&amp;gt; (Done)&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch-default&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Select another option to display a layout&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;hiding-unprocessed-inline-template-binding-expressions&quot;&gt;Hiding Unprocessed Inline Template Binding Expressions&lt;/h3&gt;

&lt;p&gt;When working with &lt;strong&gt;complex content on slow devices&lt;/strong&gt;, there can be a moment when the browser displays the HTML in the document while AngularJS is still parsing the HTML, processing the directives, and generally getting ready. &lt;/p&gt;

&lt;p&gt;A better alternative is to use &lt;strong&gt;the ng-cloak directive&lt;/strong&gt;, which has &lt;strong&gt;the effect of hiding content until AngularJS has finished processing it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The ng-cloak directive &lt;strong&gt;uses CSS to hide the elements to which it is applied&lt;/strong&gt;, and the AngularJS library removes the CSS class when the content has been processed, ensuring that the user never sees the {{ and }} characters of a template expression.&lt;/p&gt;

&lt;p&gt;A common approach is to &lt;strong&gt;apply the directive to the body element&lt;/strong&gt;, but that just means that the user sees an empty browser window while AngularJS processes the content.&lt;/p&gt;

&lt;p&gt;I prefer to be more selective and &lt;em&gt;*apply the directive only to the parts of the document where there are inline expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;well&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;radio&quot; ng-repeat=&quot;button in ['None', 'Table', 'List']&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;label ng-cloak&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;input type=&quot;radio&quot; ng-model=&quot;data.mode&quot;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;value=&quot;{{button}}&quot; ng-checked=&quot;$first&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code&gt;{{button}}&lt;/code&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/label&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch on=&quot;data.mode&quot; ng-cloak&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div ng-switch-when=&quot;Table&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;table class=&quot;table&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;#&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Action&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Done&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/thead&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;tr ng-repeat=&quot;item in todos&quot; ng-class=&quot;$odd ? 'odd' : 'even'&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;{{$index + 1}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;&amp;lt;td ng-repeat=&quot;prop in item&quot;&amp;gt;{{prop}}&amp;lt;/td&amp;gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;….&lt;/p&gt;

</description>
                <link>/angularjs/2014/12/16/using-binding-and-template-directives</link>
                <guid>/angularjs/2014/12/16/using-binding-and-template-directives</guid>
                <pubDate>2014-12-16T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Facotry and worker functions</title>
                <description>
&lt;h3 id=&quot;factory-and-worker-functions&quot;&gt;FACTORY AND WORKER FUNCTIONS&lt;/h3&gt;

&lt;p&gt;These are often &lt;strong&gt;factory functions&lt;/strong&gt;, so called because they are &lt;strong&gt;responsible for creating the object that AngularJS will employ to perform the work itself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Often, factory functions will return &lt;strong&gt;a worker function&lt;/strong&gt;, which is to say that the object that AngularJS will use to perform some work is a function, too.&lt;/p&gt;

&lt;p&gt;The second argument to the directive method is a factory function&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;myApp.directive(“highlight”, &lt;strong&gt;function&lt;/strong&gt; () {&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;return&lt;/strong&gt; function (scope, element, attrs) {&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;if (scope.day == attrs[“highlight”]) {&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;element.css(“color”, “red”);&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;}&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;The return statement in the factory function returns another function, which AngularJS will &lt;strong&gt;invoke each time it needs to apply the directive&lt;/strong&gt;, and this is the &lt;strong&gt;worker function&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;myApp.directive(“highlight”, function () {&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;return **function (scope, element, attrs) {&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;if (scope.day == attrs[“highlight”]) {**&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;element.css(“color”, “red”);&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;AngularJS will &lt;strong&gt;call the factory function when it wants to set up the building block&lt;/strong&gt; and then &lt;strong&gt;calls the worker function when it needs to apply the building block&lt;/strong&gt;, and these &lt;strong&gt;three events won’t occur in an immediate sequence&lt;/strong&gt; (in other words, other Module methods will be called before your factory function is invoked, and other factory functions will be invoked before your worker function is called).&lt;/p&gt;
</description>
                <link>/angularjs/2014/12/14/facotry-and-worker-functions</link>
                <guid>/angularjs/2014/12/14/facotry-and-worker-functions</guid>
                <pubDate>2014-12-14T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>AngularJS module</title>
                <description>
&lt;h2 id=&quot;working-with-modules&quot;&gt;Working with Modules&lt;/h2&gt;

&lt;h3 id=&quot;modules-are-the-top-level-components-for-angularjs-applications&quot;&gt;Modules are the top-level components for AngularJS applications.&lt;/h3&gt;

&lt;p&gt;Modules have three main roles in an AngularJS app&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To associate an AngularJS application with a region of an HTML document&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To act as a gateway to key AngularJS framework features&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To help organize the code and components in an AngularJS application&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setting-the-boundaries-of-an-angularjs-application&quot;&gt;Setting the Boundaries of an AngularJS Application&lt;/h3&gt;

&lt;p&gt;The first step when creating an AngularJS app is &lt;strong&gt;to define a module and associate it with a region of the HTML document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;creates the module for the example app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating a Module
&lt;code&gt;var myApp = angular.module(&quot;exampleApp&quot;, []);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;module method supports the three arguments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;name&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The name of the new module&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The convention is to give the module a name with the suffix App&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;requires&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The set of modules that this module depends on&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;config&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The configuration for the module, equivalent to calling the Module.config method—see the “Working with the Module Life Cycle” section&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Applying the ng-app Attribute in the HTML File&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html ng-app=&quot;exampleApp&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The ng-app attribute is used &lt;em&gt;during the bootstrap phase&lt;/em&gt; of the AngularJS life cycle.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;using-modules-to-define-angularjs-components&quot;&gt;Using Modules to Define AngularJS Components&lt;/h3&gt;
&lt;p&gt;The angular.module method returns a &lt;em&gt;Module object&lt;/em&gt; that provides access to the most important features that AngularJS provides via the properties and methods.&lt;/p&gt;

&lt;p&gt;The Members of the Module Object&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;animation(name, factory)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Supports the animation feature&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;config(callback)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Registers a function that can be used to configure a module when it is loaded.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;constant(key, value)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Defines a service that returns a constant value.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;controller(name, constructor)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a controller. &lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;directive(name, factory)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a directive, which extends the standard HTML vocabulary.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;factory(name, provider)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a service.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;filter(name, factory)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a filter that formats data for display to the user.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;provider(name, type)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a service.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;name&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Returns the name of the module.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;run(callback)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Registers a function that is invoked after AngularJS has loaded and configured all of the modules.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;service(name, constructor)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Creates a service.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;value(name, value)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Defines a service that returns a constant value.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;The methods defined by the Module object fall into three broad categories&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;define components for an AngularJS application&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;those that make it easier to create those building blocks&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;those that help manage the AngularJS life cycle&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;defining-controllers&quot;&gt;Defining Controllers&lt;/h3&gt;

&lt;p&gt;To act as &lt;strong&gt;a conduit between the model and the views&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most AngularJS projects will have multiple controllers, each of which delivers the data and logic required for one aspect of the application.&lt;/p&gt;

&lt;p&gt;Controllers are defined using the Module.controller method, which takes two arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the name of the controller&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;a factory function&lt;/strong&gt;, which is used to set up the controller and get it ready for use&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;var myApp = angular.module(&quot;exampleApp&quot;, []);&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;myApp.controller(&quot;dayCtrl&quot;, function (&lt;/code&gt;&lt;strong&gt;$scope&lt;/strong&gt;&lt;code&gt;) {&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;// controller statements will go here&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The convention for controller names is to use the suffix &lt;strong&gt;Ctrl&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The function passed to the Module.controller method is used to &lt;strong&gt;declare the controller’s dependencies&lt;/strong&gt;, which are the AngularJS components that the &lt;strong&gt;controller requires&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;AngularJS provides some &lt;strong&gt;built-in services and features&lt;/strong&gt; that are specified using argument names that &lt;strong&gt;start with the $ symbol&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;***Applying Controllers to Views&lt;/p&gt;

&lt;p&gt;The Controllers must be applied to HTML elements so that AngularJS knows which part of an HTML document forms the view for a given controller.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;panel&quot; ng-controller=&quot;dayCtrl&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;page-header&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;&amp;lt;h3&amp;gt;AngularJS App&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;h4&amp;gt;Today is &amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The $scope component that I specified as an argument when I &lt;strong&gt;created the controller is used to provide the view with data&lt;/strong&gt;, and only the data configured &lt;strong&gt;via $scope can be used in expressions and data bindings&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-multiple-views&quot;&gt;Creating Multiple Views&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Each controller can support multiple views&lt;/strong&gt;, which allows the same data to be presented in different ways or for closely related data to be created and managed efficiently.&lt;/p&gt;

&lt;h3 id=&quot;creating-multiple-controllers&quot;&gt;Creating Multiple Controllers&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;var myApp = angular.module(&quot;exampleApp&quot;, []);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myApp.controller(&quot;dayCtrl&quot;, function ($scope) {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myApp.controller(&quot;tomorrowCtrl&quot;, function ($scope) {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;panel&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;page-header&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;h3&amp;gt;AngularJS App&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;dayCtrl&quot;&amp;gt;Today is &amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;tomorrowCtrl&quot;&amp;gt;Tomorrow is &amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice how I am able to use the day property in &lt;strong&gt;both views without the values interfering with each other&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Each controller has its own part of the overall application scope&lt;/strong&gt;, and the day property of the dayCtrl controller is isolated from the one defined by the tomorrowCtrl controller.&lt;/p&gt;

&lt;h3 id=&quot;defining-directives&quot;&gt;Defining Directives&lt;/h3&gt;

&lt;p&gt;Directives are the most powerful AngularJS feature because they &lt;strong&gt;extend and enhance HTML to create rich web applications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The short version is that custom directives are created via the Module.directive method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myApp.directive(&quot;highlight&quot;, function () {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;return function (scope, element, attrs) {&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;if (scope.day == attrs[&quot;highlight&quot;]) {&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;element.css(&quot;color&quot;, &quot;red&quot;);&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;dayCtrl&quot; &lt;/code&gt;&lt;strong&gt;highlight=”Monday”&lt;/strong&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Today is &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;applying-directives-to-html-elements&quot;&gt;Applying Directives to HTML Elements&lt;/h3&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;dayCtrl&quot; &lt;/code&gt;&lt;strong&gt;&lt;code&gt;highlight=&quot;Monday&quot;&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;My custom directive is called &lt;strong&gt;highlight&lt;/strong&gt;, and it is applied as an attribute.&lt;/p&gt;

&lt;p&gt;I have set the value of the highlight attribute to be &lt;strong&gt;Monday&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The factory function I passed to the directive method is called when AngularJS encounters the highlight attribute in the HTML.&lt;/p&gt;

&lt;p&gt;The directive function that the factory function creates is invoked by AngularJS and is &lt;strong&gt;passed three arguments&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the scope for the view&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The scope argument lets me inspect the data that is available in the view; in this case, it allows me to get the value of the day property.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;the element to which the directive has been applied&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The attrs argument provides me with a complete set of the attributes that have been applied to the element, including the attribute that applies the directive&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;the attributes of that element.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;The element argument is a jqLite object&lt;/strong&gt;, which is the cut-down version of jQuery that is included with AngularJS.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;defining-filters&quot;&gt;Defining Filters&lt;/h3&gt;

&lt;p&gt;Filters are used in views to &lt;strong&gt;format the data displayed to the user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once defined, filters can be used throughout a module&lt;/strong&gt;, which means you can use them to ensure consistency in data presentation across multiple controllers and views.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myApp.filter(&quot;dayName&quot;, function () {&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;var dayNames = [&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;,&quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;];&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;return function (input) {&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;p&gt;&lt;code&gt;return angular.isNumber(input) ? dayNames[input] : input;&lt;/code&gt;&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;dayCtrl&quot; highlight=&quot;Monday&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Today is { {day || &quot;(unknown)&quot; | dayName} }&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;filter method&lt;/strong&gt; is used to define a filter, and the arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;strong&gt;name of the new filter&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;a factory function&lt;/strong&gt; that will create the filter when invoked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filters are themselves functions, which receive a data value and format it so it can be displayed.&lt;/p&gt;

&lt;h3 id=&quot;applying-filters&quot;&gt;Applying Filters&lt;/h3&gt;

&lt;p&gt;Filters are applied in &lt;strong&gt;template expressions contained in views&lt;/strong&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;The data binding or expression is followed by a &lt;strong&gt;bar&lt;/strong&gt; (**the&lt;/td&gt;
      &lt;td&gt;character&lt;strong&gt;) and then **the name of the filter&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h4 ng-controller=&quot;dayCtrl&quot; highlight=&quot;Monday&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Today is { {day || &quot;(unknown)&quot; | dayName} }&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/h4&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;defining-services&quot;&gt;Defining Services&lt;/h3&gt;

&lt;p&gt;Services are &lt;strong&gt;singleton objects&lt;/strong&gt; that provide any functionality that you want to use throughout an application.&lt;/p&gt;

&lt;p&gt;Three of the methods defined by the Module object are used to create services in different ways: &lt;strong&gt;service, factory, and provider&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;defining-values&quot;&gt;Defining Values&lt;/h3&gt;

&lt;p&gt;The Module.value method lets you &lt;strong&gt;create services that return fixed values and objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This may seem like an odd thing to do, but it means you can use dependency injection for any value or object, not just the ones you create using module methods like service and filter.&lt;/p&gt;

&lt;h3 id=&quot;using-modules-to-organize-code&quot;&gt;Using Modules to Organize Code&lt;/h3&gt;

&lt;p&gt;Any AngularJS module can rely on components defined in other modules, and this is a feature that makes it easier to organize the code in a complex application. &lt;/p&gt;

&lt;p&gt;One common convention is to organize your application into modules that have &lt;strong&gt;the same type of component&lt;/strong&gt; and to make it clear which building block a module contains by using the main module’s name and appending the block type.&lt;/p&gt;

&lt;h3 id=&quot;working-with-the-module-life-cycle&quot;&gt;Working with the Module Life Cycle&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Module.config and Module.run&lt;/strong&gt; methods register functions that are &lt;strong&gt;invoked at key moments in the life cycle of an AngularJS app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A function passed to the &lt;strong&gt;config method&lt;/strong&gt; is invoked when &lt;strong&gt;the current module has been loaded&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;and a function passed to the &lt;strong&gt;run method&lt;/strong&gt; is &lt;strong&gt;invoked when all modules have been loaded&lt;/strong&gt;.&lt;/p&gt;

</description>
                <link>/angularjs/2014/12/13/angularjs-module</link>
                <guid>/angularjs/2014/12/13/angularjs-module</guid>
                <pubDate>2014-12-13T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Custom filters for angularJS</title>
                <description>
&lt;p&gt;angular.module(&amp;#8220;customFilters&amp;#8221;, [])
    .filter(&amp;#8220;unique&amp;#8221;, function () {
        return function (data, propertyName) {
            if (angular.isArray(data) &amp;amp;&amp;amp; angular.isString(propertyName)) {
                var results = [];
                var keys = {};
                for (var i = 0; i &amp;lt; data.length; i++) {
                    var val = data[i][propertyName];
                    if (angular.isUndefined(keys[val])) {
                        keys[val] = true;
                        results.push(val);
                    }
}
                return results;
            } else {
                return data;
            }
} });&lt;/p&gt;

&lt;p&gt;range, returns a range of elements from an array, corresponding to a page of products. The filter accepts arguments for the currently selected page (which is used to determine the start index of range) and the page size (which is used to determine the end index).&lt;/p&gt;

&lt;p&gt;.filter(&amp;#8220;range&amp;#8221;, function ($filter) {
    return function (data, page, size) {
        if (angular.isArray(data) &amp;amp;&amp;amp; angular.isNumber(page) &amp;amp;&amp;amp; angular.isNumber(size)) {
            var start_index = (page - 1) * size;
            if (data.length &amp;lt; start_index) {
                return [];
            } else {
                return $filter(&amp;#8220;limitTo&amp;#8221;)(data.splice(start_index), size);
            }
        } else {
            return data;
        }
    }
})&lt;/p&gt;

</description>
                <link>/angularjs/2014/12/10/custom-filters-for-angularjs</link>
                <guid>/angularjs/2014/12/10/custom-filters-for-angularjs</guid>
                <pubDate>2014-12-10T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>subsetting, vectorizzed opeartions, rreading and writing data</title>
                <description>
&lt;h2 id=&quot;subsetting&quot;&gt;Subsetting&lt;/h2&gt;

&lt;p&gt;There are a number of operators that can be used to extract subsets of R objects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[&lt;/strong&gt; always returns &lt;strong&gt;an object of the same class as the original&lt;/strong&gt;; can be used to select &lt;strong&gt;more than one element&lt;/strong&gt; (there is one exception)
    &lt;ul&gt;
      &lt;li&gt;numeric index
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;x[1]&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;x[1:4]&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;logical index
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;x[x&amp;gt; &quot;a&quot;]&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;u &amp;lt;- x &amp;gt; &quot;a&quot;&lt;/code&gt;   &lt;code&gt;x[u]&lt;/code&gt; &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;exception&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;x &amp;lt;- matrix (1:6,2,3)&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;x[1,2]&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;[1] 3  #a vector with that number in it&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[[&lt;/strong&gt; is used to extract elements of a &lt;strong&gt;list or a data frame&lt;/strong&gt;; it can only be used to &lt;strong&gt;extract a single element&lt;/strong&gt; and the class of the returned object will not necessarily be a list or data frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$&lt;/strong&gt; is used to extract elements of a &lt;strong&gt;list or data frame by name&lt;/strong&gt;; semantics are similar to hat of [[ &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subsetting-a-matrix&quot;&gt;Subsetting a Matrix&lt;/h2&gt;
&lt;p&gt;Matrices can be subsetted in the usual way with (i,j) type indices
 &lt;code&gt;x[1,2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;#8217;t have to always specify both indices when subsetting a matrix.
 &lt;code&gt;x[1,]&lt;/code&gt;
 &lt;code&gt;x[,2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By default, when a single element of a matrix is retrived, it is returned as a vector of lenght 1 rather a 1 * 1 matrix.&lt;/p&gt;

&lt;p&gt;This behavior can be turned off by setting &lt;strong&gt;drop = FALSE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- matrix(1:6,2,3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;` x[1,2]&lt;/p&gt;

&lt;p&gt;[1] 3&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x[1,2,drop =FALSE]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1,] 3&lt;/p&gt;

&lt;p&gt;Similarly, subsetting a single column or a single row will give you a vector, not a matrix (by default)&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- matrix(1:6,2,3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;` x[1,]&lt;/p&gt;

&lt;p&gt;[1] 1 3 5&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x[1,,drop =FALSE]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[,1] [,2] [,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1,]  1    3    5&lt;/p&gt;

&lt;h2 id=&quot;subsetting-lists&quot;&gt;Subsetting Lists&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;* the double bracket operator
* the dollar sign operator
* the single bracket operator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- list (foo =1:4,bar = 0.6)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x[1]&lt;/code&gt;   # list&lt;/p&gt;

&lt;p&gt;$foo&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[1]]&lt;/code&gt;   # vector&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x$bar&lt;/code&gt;    # vector&lt;/p&gt;

&lt;p&gt;[1] 0.6&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[&quot;bar&quot;]]&lt;/code&gt; # vector&lt;/p&gt;

&lt;p&gt;[1] 0.6&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[&quot;bar&quot;]&lt;/code&gt;  # list&lt;/p&gt;

&lt;p&gt;$bar&lt;/p&gt;

&lt;p&gt;[1] 0.6&lt;/p&gt;

&lt;p&gt;extract multiple elements&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- list (foo=1:4,bar =0.6,baz=&quot;hello&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[c(1,3)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;$foo&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4&lt;/p&gt;

&lt;p&gt;$baz&lt;/p&gt;

&lt;p&gt;[1] &amp;#8220;hello&amp;#8221;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;[[&lt;/strong&gt; operator can be used with computed indices; &lt;strong&gt;$&lt;/strong&gt; can only be used with literal names.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- list (foo = 1:4, bar = 0.6,baz=&quot;hello&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;name &amp;lt;- &quot;foo&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[name]]&lt;/code&gt;		##computed index for &amp;#8216;foo&amp;#8217;&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x$name&lt;/code&gt;		## element &amp;#8216;name&amp;#8217; doesn&amp;#8217;t exist!&lt;/p&gt;

&lt;p&gt;NULL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x$foo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4		## element &amp;#8216;foo&amp;#8217; does exist&lt;/p&gt;

&lt;h2 id=&quot;subsetting-nested-elements-of-a-list&quot;&gt;Subsetting Nested Elements of a List&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;[[&lt;/strong&gt; can take an integer sequence.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- list(a=list(10,12,4),b=c(3.13,2.81))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[c(1,3))]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 14&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[1]][[3]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 14&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[c(2,1)]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 3.14&lt;/p&gt;

&lt;h2 id=&quot;partial-matching&quot;&gt;Partial Matching&lt;/h2&gt;
&lt;p&gt;Partial matching of names is allowed with &lt;strong&gt;[[ and $&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- list (aardvark = 1: 5)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x$a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4 5&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[&quot;a&quot;]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NULL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[[&quot;a&quot;, exact =FALSE]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 1 2 3 4 5&lt;/p&gt;

&lt;h2 id=&quot;removing-na-values&quot;&gt;Removing NA Values&lt;/h2&gt;
&lt;p&gt;A common task is to remove missing values (NAS).&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- c (1,2,NA,4,NA,5)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; bad &amp;lt;- is.na(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[!bad]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 1 2 4 5&lt;/p&gt;

&lt;p&gt;What if there are multiple things and you want to take the subset with no missing values?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- c(1,2,NA,4,NA,5)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;y &amp;lt;- c(&quot;a&quot;,&quot;b&quot;,NA,&quot;d&quot;,NA,&quot;f&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;good &amp;lt;- complete.cases(x,y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;good&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] TRUE TRUE FALSE TRUE FALSE TRUE&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x[good]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 1 2 4 5&lt;/p&gt;

&lt;p&gt;&lt;code&gt;y[good]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] &amp;#8220;a&amp;#8221; &amp;#8220;b&amp;#8221; &amp;#8220;d&amp;#8221; &amp;#8220;f&amp;#8221;&lt;/p&gt;

&lt;p&gt;matrix&lt;/p&gt;

&lt;p&gt;&lt;code&gt; airquality[1:6,]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;good &amp;lt;- complete.cases(airquality)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;airquality[good,][1:6,]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;vectorized-operations&quot;&gt;Vectorized Operations&lt;/h2&gt;
&lt;p&gt;Many operations in R are vectorized making code more efficient, concise, and easier to read.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- 1:4; y &amp;lt;- 6:9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x + y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 7 9 11 13&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x &amp;gt; 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] FALSE FALSE TRUE TRUE&lt;/p&gt;

&lt;p&gt;&lt;code&gt;y==8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] FALSE FALSE TRUE FALSE&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x * y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 6 14 24 36&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x / y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[1] 0.16667 0.28571 0.37500 0.44444&lt;/p&gt;

&lt;h2 id=&quot;vectorized-matrix-operations&quot;&gt;Vectorized Matrix Operations&lt;/h2&gt;

&lt;p&gt;x &amp;lt;- matrix(1:4, 2, 2); y &amp;lt;- matrix(rep(10, 4), 2, 2)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x * y ## element-wise multiplication&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x %*% y ## true matrix multiplication&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;reading-data&quot;&gt;Reading Data&lt;/h2&gt;

&lt;p&gt;There are a few principal function reading data into R&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;read.table&lt;/code&gt;, &lt;code&gt;read.csv&lt;/code&gt;, for reading tabular data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;readLines&lt;/code&gt;, for reading lines of a text file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;source&lt;/code&gt;, for reading in R code files (inverse of dump)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;dget&lt;/code&gt;, for reading in R code files (inverse of dput)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;load&lt;/code&gt;, for reading in saved workspace&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;#8216;unserialize&amp;#8217;, for reading single R objects in binary form&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;writing-data&quot;&gt;Writing Data&lt;/h2&gt;

&lt;p&gt;There are analogous functions for writing data to files&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;write.table&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;writeLines&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;dump&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;dput&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;serialize&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>/r/2014/12/09/subsetting-vectorizzed-opeartions-rreading-and-writing-data</link>
                <guid>/r/2014/12/09/subsetting-vectorizzed-opeartions-rreading-and-writing-data</guid>
                <pubDate>2014-12-09T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>basic data types in R</title>
                <description>
&lt;h2 id=&quot;r-has-five-basic-or-automic-classes-of-object&quot;&gt;R has five basic or “automic” classes of object&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;character&lt;/li&gt;
  &lt;li&gt;numeric (real number)&lt;/li&gt;
  &lt;li&gt;integer&lt;/li&gt;
  &lt;li&gt;complex&lt;/li&gt;
  &lt;li&gt;logical(True/False)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-basic-object-is-a-vector&quot;&gt;The basic object is a vector&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A vector can only contain objects of the same class&lt;/li&gt;
  &lt;li&gt;BUT : The one exception is a list, which is represented as a vector but can contain objets of differents classes (indeed, that’s usually why we use them)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empty vectors can be created with the &lt;code&gt;vector()&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;vector() 函数有两个基本参数 &lt;/p&gt;

&lt;p&gt;*the class of the objects 
*the length of the vector&lt;/p&gt;

&lt;h2 id=&quot;numbers&quot;&gt;Numbers&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Numbers in R a generally treated as numeric object (i.e. double precision real numbers)&lt;/li&gt;
  &lt;li&gt;If you want an integer, you need specify the L suffix (ex: 1L)&lt;/li&gt;
  &lt;li&gt;There is a special number &lt;strong&gt;Inf&lt;/strong&gt; which represents infinity&lt;/li&gt;
  &lt;li&gt;The value &lt;strong&gt;NaN&lt;/strong&gt; represents an undefined value (“not a nubmer”); e.g. 0/0; NaN can also be thought of as a missing value&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attributes&quot;&gt;Attributes&lt;/h2&gt;
&lt;p&gt;R objects can have attributes
* names,dimnames
* dimensions (e.g. matrices, arrays)
* class
* length
* other user-defined attributes/metedata&lt;/p&gt;

&lt;p&gt;Attributes of an object can be accessed using the &lt;code&gt;attributes()&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;entering-input&quot;&gt;Entering Input&lt;/h2&gt;
&lt;p&gt;At the R prompt we type expressions. The &lt;strong&gt;&amp;lt;-&lt;/strong&gt; symbol is the assignment operator.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;#&lt;/strong&gt; character indicates a comment. Anything to the right of the # is ignored.&lt;/p&gt;

&lt;h2 id=&quot;creating-vectors&quot;&gt;Creating Vectors&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;c()&lt;/code&gt; function can be used to create vectors of objects.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- (0.5, 0.6)		## numeric&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- (T, F)			## logical&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- 9:29        		## integer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- c(1+0i, 2+4i)	## complex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When different objects are mixed in a vector, coercion occurs so that every element in the vector is of the same class.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; y &amp;lt;- c(1.7,&quot;a&quot;)		## character&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; y &amp;lt;- c(TRUE,2)		## numeric&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; y &amp;lt;- c(&quot;a&quot;,TRUE)		## character&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;vector()&lt;/code&gt; function
` x &amp;lt;- vector (“numeric” , length=10)`&lt;/p&gt;

&lt;h2 id=&quot;explicit-coercion&quot;&gt;Explicit Coercion&lt;/h2&gt;
&lt;p&gt;Objects can explicitly coerced from one class to antoher using the &lt;code&gt;as.*&lt;/code&gt; function, if available.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- 0:6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;as.numeric(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;as.logical(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;as.character(x)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;matrices&quot;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;Matrices are vectors with a dimension attribute. The dimension attribute is itself an integer vector of lenght 2 (nrow,ncol)&lt;/p&gt;

&lt;p&gt;&lt;code&gt; m &amp;lt;- matrix (nrow=2,ncol=3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Matrices are constructed column-wise, so entries can be though of starting in the “upper left” comer and running down the columns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; m &amp;lt;- matrix (1:6, nrow=2, ncol=3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Matrices can also be created directly from vectors by adding a dimension attribute.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; m &amp;lt;- 1:10 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; dim(m) &amp;lt;- c(2,5) &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;cbind-ing-and-rbind-ing&quot;&gt;cbind-ing and rbind-ing&lt;/h2&gt;

&lt;p&gt;Matrices can be created by column-binding or row-binding with &lt;code&gt;cbind()&lt;/code&gt; and &lt;code&gt;rbind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- 1:3 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; y &amp;lt;- 10:12 &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Lists are special type of vector that can contain elements of different classes. Lists are a very important data type in R .&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- list(1,&quot;a&quot;,TRUE, 1+4i) &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;factors&quot;&gt;Factors&lt;/h2&gt;
&lt;p&gt;Factors are used to represent categorical data. Factors can be unordered or ordered. One can think of a factor as an integer vector where each integer has a label.
* Factors are treated specially by modelling functions like &lt;code&gt;lm()&lt;/code&gt; and &lt;code&gt;glm()&lt;/code&gt;
* Using factors with labels is better than using integers because factors are self-describing; having a variable that has values “Male” and “Female” is better than a variable that has values 1 and 2.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- factor (c(&quot;yes&quot;,&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;,&quot;no&quot;))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Levels : no yes&lt;/p&gt;

&lt;p&gt;&lt;code&gt; table(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; unclass(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The order of the levels can be set using the &lt;code&gt;levels&lt;/code&gt; argument to &lt;code&gt;factor()&lt;/code&gt;.This can be important in linear modeling because the first level is used as the baseline level.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- factor(c(&quot;yes&quot;,&quot;yes&quot;,&quot;no&quot;,&quot;yes&quot;,&quot;no&quot;), levels= c(&quot;yes&quot;,&quot;no&quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;missing-values&quot;&gt;Missing Values&lt;/h2&gt;
&lt;p&gt;Missing values are denoted by &lt;strong&gt;NA&lt;/strong&gt; or &lt;strong&gt;NaN&lt;/strong&gt; for undefined mathematial operations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;is.na()&lt;/code&gt; is used to test objects if they are &lt;strong&gt;NA&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;is.nan()&lt;/code&gt; is used to test for &lt;strong&gt;NaN&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;NA values have a class also, so there are integer &lt;strong&gt;NA&lt;/strong&gt;, character &lt;strong&gt;NA&lt;/strong&gt;, etc.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;NaN&lt;/strong&gt; value is also &lt;strong&gt;NA&lt;/strong&gt; but the converse is not true.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-frames&quot;&gt;Data Frames&lt;/h2&gt;
&lt;p&gt;Data frames are used to store tabular data&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are represented as special type of list where every element of the list has to have same length&lt;/li&gt;
  &lt;li&gt;Each element of the list can be thought of as a column and the length of each element of the list is the number of rows&lt;/li&gt;
  &lt;li&gt;Unlike matrics, data frames can store different classes of objects in each column (just like lists); matrices must have every element be the same class&lt;/li&gt;
  &lt;li&gt;Data frames also have special attribute called row.names&lt;/li&gt;
  &lt;li&gt;Data frames are usually created by calling &lt;code&gt;read.table()&lt;/code&gt; or &lt;code&gt;read.csv()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Can be converted to a matrix by calling &lt;code&gt;data.matrix()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;x &amp;lt;- data.frame (foo =1:4,bar = c(T,T,F,T))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; nrow(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; ncol(x)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;names&quot;&gt;Names&lt;/h2&gt;
&lt;p&gt;R objects can also have names, which is very useful for writing reabable code and self-describing objects.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- 1:3 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; names(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NULL&lt;/p&gt;

&lt;p&gt;&lt;code&gt; names(x) &amp;lt;- c(&quot;foo&quot;,&quot;bar&quot;,&quot;norf&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; names(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lists can also have names.&lt;/p&gt;

&lt;p&gt;&lt;code&gt; x &amp;lt;- list( a=1,b=2,c=3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;matrices&lt;/p&gt;

&lt;p&gt;&lt;code&gt; m &amp;lt;- matrix (1:4, nrow=2 ,ncol=2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; dimnames(m) &amp;lt;- list(c(&quot;a&quot;,&quot;b&quot;),c(&quot;c&quot;,&quot;d&quot;))&lt;/code&gt;&lt;/p&gt;
</description>
                <link>/r/2014/12/09/basic-data-types-in-r</link>
                <guid>/r/2014/12/09/basic-data-types-in-r</guid>
                <pubDate>2014-12-09T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Build a Docker container with the gerrit code review system</title>
                <description>
&lt;h2 id=&quot;build-on-top-of-ubuntu-trusty-1404-and-gerrit-285&quot;&gt;Build on top of Ubuntu Trusty (14.04) and gerrit 2.8.5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/javiosyc/testdocker/tree/master/gerrit-docker&quot;&gt;Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build -t javio/gerrit .&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;gen-all-projectsgit&quot;&gt;gen All-Projects.git&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run  -p 8099:8080 -p 49418:29418 -d -t --name gerrit javio/gerrit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --rm --volumes-from gerrit -v $(pwd):/home/gerrit/gerrit/git_bk/ ubuntu cp -r /home/gerrit/gerrit/git/. /home/gerrit/gerrit/git_bk&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;backup-git-repository&quot;&gt;Backup Git Repository&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run --rm --volumes-from gerrit -v $(pwd):/home/gerrit/gerrit/git_bk/ ubuntu cp -r /home/gerrit/gerrit/git/. /home/gerrit/gerrit/git_bk&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-gerrit&quot;&gt;Run Gerrit&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -p 8099:8080 -p 49418:29418 -d -t --name gerrit -v $(pwd):/home/gerrit/gerrit/git/ javio/gerrit&lt;/code&gt;&lt;/p&gt;

</description>
                <link>/docker/2014/12/07/build-a-docker-container-with-the-gerrit-code-review-system</link>
                <guid>/docker/2014/12/07/build-a-docker-container-with-the-gerrit-code-review-system</guid>
                <pubDate>2014-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>PPA for Ubuntu</title>
                <description>
&lt;h2 id=&quot;personal-package-archives&quot;&gt;Personal Package Archives&lt;/h2&gt;

&lt;p&gt;Personal Package Archives (PPA) allow you to upload Ubuntu source packages to be built and published as an apt repository by Launchpad. &lt;/p&gt;

&lt;h3 id=&quot;ubuntu-ppa--personal-package-archive---apt-get-install&quot;&gt;安裝不是 Ubuntu 的預設的軟體，要新增第三方的PPA ( Personal Package Archive ) 才能用 apt-get install&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;1.PPA 的網址加到 /etc/apt/sources.list &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;RUN echo &quot;deb http://archive.ubuntu.com/ubuntu trusty main universe&quot; &amp;gt; /etc/apt/sources.list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RUN wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch |  apt-key add -&lt;/code&gt;
&lt;code&gt;RUN echo 'deb http://packages.elasticsearch.org/logstash/1.4/debian stable main' &amp;gt; /etc/apt/sources.list.d/logstash.list&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;2.add-apt-repository&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;add-apt-repository ppa:launchpad&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-apt-repository-is-not-default-packages&quot;&gt;add-apt-repository is not default packages&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;apt-get install python-software-properties&lt;/code&gt;&lt;/p&gt;
</description>
                <link>/ubuntu/2014/12/01/personal-package-archives-for-ubuntu</link>
                <guid>/ubuntu/2014/12/01/personal-package-archives-for-ubuntu</guid>
                <pubDate>2014-12-01T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>multi container application stack</title>
                <description>
&lt;h2 id=&quot;a-multi-container-application-stack&quot;&gt;A Multi-Container Application Stack&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;A node container (jamtur01/nodejs)&lt;/li&gt;
      &lt;li&gt;A redis primary container (jamtur01/redis_primary)&lt;/li&gt;
      &lt;li&gt;Two Redis replica containers (jamtur01/redis_replica)&lt;/li&gt;
      &lt;li&gt;A logger container to capture our applcation logs.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;start redis primary container&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;docker run -d -h redis-primary --name redis-primary jamtur01/redis_primary&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;get the log in the redis primary
&amp;gt; &lt;code&gt;docker run -ti -rm -volumes-from redis_primary ubuntu cat /var/log/redis/redis-server.log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;start redis replica container&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;docker run -d -h redis_replica1 --name redis_replica1 --link redis_primary:redis_primary jamtur01/redis_replica&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;docker run -d -h redis_replica2 --name redis_replica2 --link redis_primary:redis_primary jamtur01/redis_replica&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;get the log in the redis_replica
&amp;gt; &lt;code&gt;docker run -ti -rm -volumes-from redis_replica1 ubuntu cat /var/log/redis/redis-replica.log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;code&gt;docker run -ti -rm -volumes-from redis_replica2 ubuntu cat /var/log/redis/redis-replica.log&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;start node container
&amp;gt; &lt;code&gt;docker run -d --name nodeapp -p 3000:3000 --link redis_primary:redis_primary jamtur01/nodejs&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;docker run -d &amp;#8211;name logstash &amp;#8211;volumes-from redis_primary &amp;#8211;volumes-from nodeapp jamtur01/logstash&lt;/p&gt;
</description>
                <link>/docker/2014/12/01/multi-container-application-stack</link>
                <guid>/docker/2014/12/01/multi-container-application-stack</guid>
                <pubDate>2014-12-01T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Launching Jekyll site using docker</title>
                <description>
&lt;h2 id=&quot;get-source-code-for-my-blog&quot;&gt;Get Source Code For My Blog&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cd $workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/javiosyc/jekyll.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;compile-source-code-and-build-it&quot;&gt;Compile Source Code And Build It&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cd jekyll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -v $(pwd):/data/ --name javio_blog jamtur01/jekyll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -p 8099:80 --volumes-from javio_blog jamtur01/apache&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;updating-the-jekyll-site&quot;&gt;Updating The Jekyll Site&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker start javio_blog&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;backing-up-the-jekyll-volume&quot;&gt;Backing Up The Jekyll volume&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker run --rm --volumes-from javio_blog -v $(pwd):/backup/ ubuntu 
tar cvf /backup/javio_blog.tar /var/www/html&lt;/code&gt;&lt;/p&gt;
</description>
                <link>/docker/2014/12/01/launch-jekyll-site-by-docker</link>
                <guid>/docker/2014/12/01/launch-jekyll-site-by-docker</guid>
                <pubDate>2014-12-01T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation.
What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary
&lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website.
The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;
</description>
                <link>/lessons/2011/12/29/jekyll-introduction</link>
                <guid>/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00+00:00</pubDate>
        </item>


</channel>
</rss>
